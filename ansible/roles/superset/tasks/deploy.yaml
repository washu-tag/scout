---
- name: Create namespace
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: namespace
  vars:
    ns: '{{ superset_namespace }}'

- name: Build dashboard ConfigMap data
  delegate_to: localhost
  block:
    - name: Find all analytics YAML files
      ansible.builtin.find:
        paths: '{{ superset_analytics_dir }}'
        recurse: true
        file_type: file
        patterns:
          - '*.yaml'
          - '*.yaml.j2'
      register: analytics_files

    - name: Build ConfigMap data and items list
      no_log: true
      vars:
        analytics_root: '{{ (superset_analytics_dir | realpath) }}'
        is_template: '{{ item.path.endswith(".j2") }}'
        file_basename: '{{ (item.path | basename | regex_replace("\.j2$", "")) }}'
        file_content: '{{ lookup("template" if is_template else "file", item.path) }}'
        file_mount_path: '{{ ((item.path | realpath) | regex_replace("^" ~ analytics_root ~ "/", "analytics/") | regex_replace("\.j2$", "")) }}'
      ansible.builtin.set_fact:
        superset_dashboard_data: >-
          {{
            superset_dashboard_data | default({}) |
            combine({ file_basename: file_content })
          }}
        superset_dashboard_items: >-
          {{
            superset_dashboard_items | default([]) + [
              {
                'key': file_basename,
                'path': file_mount_path
              }
            ]
          }}
      loop: '{{ analytics_files.files }}'
      loop_control:
        label: '{{ (item.path | realpath) | regex_replace("^" ~ analytics_root ~ "/", "") }}'

- name: Create ConfigMap for datasource and dashboard yaml
  no_log: true
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: dashboard-config
        namespace: '{{ superset_namespace }}'
      data: '{{ superset_dashboard_data | default({}) }}'

- name: Create ConfigMap with Scout logo for Superset branding
  delegate_to: localhost
  no_log: true
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: scout-logo
        namespace: '{{ superset_namespace }}'
      binaryData:
        scout.png: '{{ lookup("file", superset_logo_path) | b64encode }}'

- name: Deploy Superset
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: deploy_helm_chart
  vars:
    helm_chart_name: '{{ superset_helm_chart_name }}'
    helm_chart_ref: '{{ superset_helm_repo_name }}/{{ superset_helm_chart_name }}'
    helm_chart_version: '{{ superset_helm_chart_version }}'
    helm_chart_namespace: '{{ superset_namespace }}'
    helm_repo_name: '{{ superset_helm_repo_name }}'
    helm_repo_url: '{{ superset_helm_repo_url }}'
    helm_chart_timeout: '{{ superset_helm_timeout }}'
    helm_chart_values:
      image:
        repository: '{{ superset_image_repository }}'
        tag: '{{ superset_image_tag }}'
      redis:
        image:
          repository: '{{ superset_redis_image_repository }}'
      extraSecretEnv:
        SUPERSET_SECRET_KEY: '{{ superset_secret }}'
      ingress:
        enabled: true
        ingressClassName: traefik
        path: /
        hosts:
          - 'superset.{{ server_hostname }}'
      postgresql:
        enabled: false
      supersetNode:
        connections:
          db_host: '{{ postgres_cluster_name }}-rw.{{ postgres_cluster_namespace }}'
          db_port: '5432'
          db_user: '{{ superset_postgres_user }}'
          db_pass: '{{ superset_postgres_password }}'
          db_name: '{{ superset_database }}'
        resources: '{{ superset_resources }}'
      configOverrides:
        branding: |
          APP_NAME = "{{ superset_app_name }}"
          APP_ICON = "/static/assets/images/scout.png"
          APP_ICON_WIDTH = {{ superset_logo_width }}
          LOGO_TARGET_PATH = "https://{{ server_hostname }}"
          LOGO_TOOLTIP = "Scout Launchpad"
          FAVICONS = [{"href": "/static/assets/images/scout.png"}]
        custom_routing: |
          from flask import redirect, url_for
          from flask_appbuilder import expose, IndexView

          from superset.superset_typing import FlaskResponse

          class SupersetIndexView(IndexView):
              @expose("/")
              def index(self) -> FlaskResponse:
                  return redirect(url_for("Superset.dashboard", dashboard_id_or_slug="scout"))

          FAB_INDEX_VIEW = f"{SupersetIndexView.__module__}.{SupersetIndexView.__name__}"
        sql_alchemy: |
          SQLALCHEMY_ENGINE_OPTIONS = {
              "pool_size": {{ superset_pool_size }},
              "max_overflow": {{ superset_pool_max_overflow }},
              "pool_timeout": {{ superset_pool_timeout }},
          }
      extraVolumes:
        - name: dashboard-config
          configMap:
            name: dashboard-config
            items: '{{ superset_dashboard_items | default([]) }}'
        - name: scout-logo
          configMap:
            name: scout-logo
            defaultMode: 0644

      extraVolumeMounts:
        - name: dashboard-config
          mountPath: /app/dashboard-config
        - name: scout-logo
          mountPath: /app/superset/static/assets/images/scout.png
          subPath: scout.png
          readOnly: true

      init:
        initscript: "{{ lookup('template', 'init_script.sh.j2') }}"
