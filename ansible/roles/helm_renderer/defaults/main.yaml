---
# Default variables for helm_renderer role
# These can be overridden by the caller

# Chart rendering behavior flag (inherited from inventory)
use_staging_node: false

# =============================================================================
# Required Variables (caller must provide)
# =============================================================================
# - helm_chart_name: Helm release name
# - helm_chart_ref: Chart reference (repo/chart or local path)
# - helm_chart_namespace: Target namespace

# =============================================================================
# Chart Configuration
# =============================================================================
helm_chart_version: null
helm_chart_create_namespace: true
helm_chart_wait: true
helm_chart_timeout: '5m'
helm_chart_values: {}
helm_chart_values_files: []

# For repository charts only (optional)
helm_repo_name: null
helm_repo_url: null

# =============================================================================
# API Versions Configuration
# =============================================================================
# List of Kubernetes API versions to make available during chart templating.
# This is CRITICAL for air-gapped deployments where charts check for CRD
# availability during rendering.
#
# WHEN TO USE:
# ------------
# Set this when a chart has conditional logic based on API availability:
# - Charts requiring cert-manager (for webhooks, TLS certificates)
# - Charts that create CRDs and reference them in templates
# - Charts with .Capabilities.APIVersions.Has checks in templates
#
# HOW TO DISCOVER IF YOU NEED THIS:
# ----------------------------------
# 1. Try rendering the chart locally first:
#    $ helm template test-name repo/chart --version X.Y.Z --namespace test
#
# 2. Look for these error patterns:
#    - "requires cert-manager to be installed in the cluster"
#    - "requires [X] CRD to be present"
#    - "execution error at (...): [dependency] not found"
#    - Template references to {{ .Capabilities.APIVersions.Has "..." }}
#
# 3. If you see such errors, you need to specify the required API versions.
#
# HOW TO FIND THE CORRECT API VERSION:
# -------------------------------------
# Option 1 - Inspect the dependency chart's CRDs:
#   $ helm pull dependency/chart --untar
#   $ grep -r "apiVersion:" dependency/chart/crds/ | head -5
#   Example output: apiVersion: cert-manager.io/v1
#
# Option 2 - Check chart templates for Capabilities checks:
#   $ helm show all repo/chart | grep -B2 -A2 "Capabilities.APIVersions"
#
# Option 3 - Test locally with --api-versions flag:
#   $ helm template test repo/chart --api-versions cert-manager.io/v1
#   (If rendering succeeds, that's the API version you need)
#
# Option 4 - Check chart documentation or values for dependency notes
#
# COMMON API VERSIONS:
# --------------------
# cert-manager.io/v1              # Charts using cert-manager (webhooks, certs)
# monitoring.coreos.com/v1        # Charts creating Prometheus ServiceMonitors
# snapshot.storage.k8s.io/v1      # Charts using VolumeSnapshots
# networking.k8s.io/v1            # Charts with NetworkPolicies
# policy/v1                       # Charts creating PodDisruptionBudgets
#
# EXAMPLES:
# ---------
# For cass-operator (requires cert-manager for admission webhooks):
#   helm_chart_api_versions:
#     - cert-manager.io/v1
#
# For charts with multiple CRD dependencies:
#   helm_chart_api_versions:
#     - cert-manager.io/v1
#     - monitoring.coreos.com/v1
#
# Default: no additional API versions
helm_chart_api_versions: []

# =============================================================================
# Error Handling and Debugging
# =============================================================================

# When true, automatically delete namespace if manifest application fails
# When false, leave partially-applied resources for manual inspection/cleanup
# WARNING: This will delete ALL resources in the namespace on failure
helm_chart_cleanup_on_failure: false

# Skip applying manifests to cluster (render only, useful for testing/debugging)
# When true, manifests are rendered but not applied
helm_chart_skip_apply: false

# Skip cleanup of temporary render directory (useful for debugging)
# When true, rendered manifests remain in /tmp for inspection
# Useful when troubleshooting rendering issues
helm_chart_skip_cleanup: false

# Resource kinds to wait for when helm_chart_wait is true
helm_chart_wait_for_kinds:
  - Deployment
  - StatefulSet
  - DaemonSet
  - Job

# =============================================================================
# Internal Variables (computed during execution, do not set)
# =============================================================================
helm_render_dir: null
