---
# Apply rendered Kubernetes manifests to cluster

- name: 'Create namespace if needed'
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: '{{ helm_chart_namespace }}'
    state: present
  when: helm_chart_create_namespace | default(false)

- name: 'Find all rendered YAML files'
  delegate_to: localhost
  ansible.builtin.find:
    paths: '{{ manifests_dir }}'
    patterns: '*.yaml'
    recurse: true
  register: manifest_files

- name: 'Apply each manifest file to cluster'
  kubernetes.core.k8s:
    state: present
    src: '{{ item.path }}'
    namespace: '{{ helm_chart_namespace }}'
  loop: '{{ manifest_files.files }}'
  loop_control:
    label: '{{ item.path | basename }}'
  register: apply_results
  # Continue applying remaining manifests even if one fails
  # We'll check for failures after all attempts
  failed_when: false

- name: 'Handle manifest apply failures'
  when:
    - apply_results.results | selectattr('failed', 'defined') | selectattr('failed') | list | length > 0
  vars:
    failed_manifests: "{{ apply_results.results | selectattr('failed', 'defined') | selectattr('failed') | list }}"
  block:
    - name: 'Clean up namespace on failure (if enabled)'
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: '{{ helm_chart_namespace }}'
        state: absent
        wait: true
        wait_timeout: 120
      when:
        - helm_chart_cleanup_on_failure | default(false) | bool
        - helm_chart_create_namespace | default(false) | bool

    - name: 'Report manifest apply failures'
      ansible.builtin.fail:
        msg: |
          Failed to apply {{ failed_manifests | length }} manifest(s) for {{ helm_chart_name }}:
          {% for result in apply_results.results %}
          {% if result.failed | default(false) %}
            - {{ result.item.path | basename }}: {{ result.msg | default('Unknown error') }}
          {% endfor %}

          {% if helm_chart_cleanup_on_failure | default(false) | bool %}
          Namespace {{ helm_chart_namespace }} was deleted due to failure.
          {% else %}
          Successful manifests remain applied. To clean up:
            kubectl delete namespace {{ helm_chart_namespace }}
          Or manually remove individual resources.

          To enable automatic cleanup on failure, set: helm_chart_cleanup_on_failure: true
          {% endif %}

- name: 'Wait for workload resources to be ready'
  when:
    - helm_chart_wait | default(false)
  vars:
    wait_kinds: >-
      {{ helm_chart_wait_for_kinds | default(['Deployment', 'StatefulSet',
      'DaemonSet', 'Job']) }}
    timeout_retries: >-
      {{ ((helm_chart_timeout | default('5m') |
      regex_replace('m', '') | int) * 6) }}
  block:
    - name: 'Wait for deployments to be available'
      when:
        - "'Deployment' in wait_kinds"
      block:
        - name: 'Get all deployments in namespace'
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: Deployment
            namespace: '{{ helm_chart_namespace }}'
          register: deployments_info

        - name: 'Wait for each deployment to be available'
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: Deployment
            namespace: '{{ helm_chart_namespace }}'
          register: deployments_check
          until: >
            deployments_check.resources |
            selectattr('status.conditions', 'defined') |
            map(attribute='status.conditions') |
            flatten |
            selectattr('type', 'equalto', 'Available') |
            selectattr('status', 'equalto', 'True') |
            list | length >= (deployments_info.resources | length)
          retries: '{{ timeout_retries }}'
          delay: 10
          when:
            - deployments_info.resources | length > 0

    - name: 'Wait for statefulsets to be ready'
      when:
        - "'StatefulSet' in wait_kinds"
      block:
        - name: 'Get all statefulsets in namespace'
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: StatefulSet
            namespace: '{{ helm_chart_namespace }}'
          register: statefulsets_info

        - name: 'Wait for each statefulset to be ready'
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: StatefulSet
            namespace: '{{ helm_chart_namespace }}'
          register: statefulsets_check
          vars:
            ready_count: >-
              {{ statefulsets_check.resources |
              map(attribute='status.readyReplicas', default=0) | list }}
            desired_count: >-
              {{ statefulsets_check.resources |
              map(attribute='status.replicas', default=0) | list }}
          until: ready_count == desired_count
          retries: '{{ timeout_retries }}'
          delay: 10
          when:
            - statefulsets_info.resources | length > 0

    - name: 'Wait for daemonsets to be ready'
      when:
        - "'DaemonSet' in wait_kinds"
      block:
        - name: 'Get all daemonsets in namespace'
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: DaemonSet
            namespace: '{{ helm_chart_namespace }}'
          register: daemonsets_info

        - name: 'Wait for each daemonset to be ready'
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: DaemonSet
            namespace: '{{ helm_chart_namespace }}'
          register: daemonsets_check
          vars:
            ready_count: >-
              {{ daemonsets_check.resources |
              map(attribute='status.numberReady', default=0) | list }}
            desired_count: >-
              {{ daemonsets_check.resources |
              map(attribute='status.desiredNumberScheduled', default=0) | list }}
          until: ready_count == desired_count
          retries: '{{ timeout_retries }}'
          delay: 10
          when:
            - daemonsets_info.resources | length > 0

    - name: 'Wait for jobs to complete'
      when:
        - "'Job' in wait_kinds"
      block:
        - name: 'Get all jobs in namespace'
          kubernetes.core.k8s_info:
            api_version: batch/v1
            kind: Job
            namespace: '{{ helm_chart_namespace }}'
          register: jobs_info

        - name: 'Wait for each job to complete'
          kubernetes.core.k8s_info:
            api_version: batch/v1
            kind: Job
            namespace: '{{ helm_chart_namespace }}'
          register: jobs_check
          until: >
            jobs_check.resources |
            selectattr('status.conditions', 'defined') |
            map(attribute='status.conditions') |
            flatten |
            selectattr('type', 'equalto', 'Complete') |
            selectattr('status', 'equalto', 'True') |
            list | length >= (jobs_info.resources | length)
          retries: '{{ timeout_retries }}'
          delay: 10
          when:
            - jobs_info.resources | length > 0
