proxy:
  service:
    type: ClusterIP

hub:
  resources: {{ jupyter_hub_resources | to_json }}
  shutdownOnLogout: true
  services:
    prometheus:
      admin: false
      # Secret would be preferred, but not clear how to do that in this chart
      api_token: '{{ jupyter_metrics_api_token }}'
  loadRoles:
    metrics:
      description: 'Read JupyterHub metrics'
      scopes: [read:metrics]
      services: [prometheus]
  db:
    pvc:
      storageClassName: '{{ use_custom_storage_classes | ternary(jupyter_hub_storage_class, omit) }}'
  config:
    Authenticator:
      auto_login: true
    JupyterHub:
      subdomain_host: 'jupyter.{{ server_hostname }}'
      authenticator_class: 'oauthenticator.generic.GenericOAuthenticator'
    GenericOAuthenticator:
      login_service: 'Keycloak'
      client_id: '{{ keycloak_jupyterhub_client_id }}'
      client_secret: '{{ keycloak_jupyterhub_client_secret }}'
      oauth_callback_url: 'https://jupyter.{{ server_hostname }}/hub/oauth_callback'
      authorize_url: '{{ keycloak_oidc_auth_url }}'
      token_url: '{{ keycloak_oidc_token_url }}'
      userdata_url: '{{ keycloak_oidc_userinfo_url }}'
      logout_redirect_url: '{{ oauth2_proxy_signout_url }}'
      userdata_params:
        state: 'state'
      username_claim: 'preferred_username'
      scope:
        - openid
        - microprofile-jwt
      enable_auth_state: true
      auth_state_groups_key: 'oauth_user.groups'
      manage_groups: true
      allowed_groups:
        - 'jupyterhub-user'
      admin_groups:
        - 'jupyterhub-admin'
    Spawner:
      http_timeout: 120

ingress:
  enabled: true
  ingressClassName: traefik
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: >
      kube-system-oauth2-proxy-error@kubernetescrd,
      kube-system-oauth2-proxy-auth@kubernetescrd
  hosts:
    - 'jupyter.{{ server_hostname }}'
    - '*.jupyter.{{ server_hostname }}'

prePuller:
  hook:
    enabled: true
  continuous:
    enabled: {{ jupyter_prepuller_continuous | default(false) }}

singleuser:
  image:
    name: '{{ jupyter_singleuser_image_name }}'
    tag: '{{ jupyter_singleuser_image_tag }}'
    pullPolicy: IfNotPresent
  cmd: null
  lifecycleHooks:
    postStart:
      exec:
        command:
          - '/bin/sh'
          - '-c'
          - |
            FLAG_FILE=/home/$NB_USER/.scout_quickstart
            if [ ! -f $FLAG_FILE ]; then
              mkdir -p /home/$NB_USER/Scout &&
              cp -r /opt/scout/samples/* /home/$NB_USER/Scout/ &&
              chown -R $NB_USER:$NB_GID /home/$NB_USER/Scout &&
              touch $FLAG_FILE
            fi
  extraFiles:
    jupyter-server-config:
      mountPath: /etc/jupyter/jupyter_server_config.py
      stringData: |
        # Set CSP headers to enable Voila plugin rendering in JupyterLab iframe
        c.ServerApp.tornado_settings = {
            'headers': {
                'Content-Security-Policy': "frame-ancestors 'self'"
            }
        }

  cpu:
    guarantee: {{ jupyter_singleuser_cpu_request }}
    limit: {{ jupyter_singleuser_cpu_limit }}
  memory:
    guarantee: '{{ jupyter_singleuser_memory_request if jupyter_singleuser_memory_request else jupyter_spark_memory }}'
    limit: '{{ jupyter_singleuser_memory_limit if jupyter_singleuser_memory_limit else (jupyter_spark_memory | multiply_memory(2)) }}'
  extraResource: {{ jupyter_singleuser_extra_resource | default({}) | to_json }}
  storage:
    type: static
    static:
      pvcName: '{{ jupyter_singleuser_pvc }}'
      subPath: '{username}'
    capacity: 10Gi
    extraVolumes:
      spark-defaults:
        name: spark-defaults
        configMap:
          name: spark-defaults
    extraVolumeMounts:
      spark-defaults:
        name: spark-defaults
        mountPath: /usr/local/spark/conf/spark-defaults.conf
        subPath: spark-defaults.conf
  networkPolicy:
    egress:
      # Allow access to MinIO for data lake storage
      - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: '{{ minio_tenant_namespace }}'
        ports:
          - port: 9000
      # Allow access to Hive Metastore (readonly) for metadata queries
      # Only allow access to readonly metastore, not write metastore
      - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: '{{ hive_namespace }}'
            podSelector:
              matchLabels:
                app.kubernetes.io/instance: '{{ hive_metastore_instance_readonly }}'
        ports:
          - port: 9083
