---
# Deploy JupyterHub using Helm

- name: Validate required variables
  ansible.builtin.assert:
    that:
      - jupyter_metrics_api_token is defined
      - jupyter_metrics_api_token | length > 0
      - jupyter_mcp_api_token is defined
      - jupyter_mcp_api_token | length > 0
    fail_msg: >
      Required API tokens (jupyter_metrics_api_token and jupyter_mcp_api_token) must be set in inventory.yaml.
      Use vault encryption. Example: openssl rand -hex 32 | ansible-vault encrypt_string --vault-password-file vault/pwd.sh
    quiet: true

- name: Create namespace
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: namespace
  vars:
    ns: '{{ jupyter_namespace }}'

- name: Set up storage
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: storage_setup
  vars:
    storage_definitions: '{{ jupyter_storage_definitions }}'

- name: Create PersistentVolumeClaim for Jupyter single-user storage
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: '{{ jupyter_singleuser_pvc }}'
        namespace: '{{ jupyter_namespace }}'
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: '{{ jupyter_singleuser_storage_size }}'
        storageClassName: '{{ use_custom_storage_classes | ternary(jupyter_singleuser_storage_class, omit) }}'

- name: Setup Spark Defaults ConfigMap
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: spark_config_setup
  vars:
    spark_defaults_configmap_name: spark-defaults
    spark_defaults_configmap_namespace: '{{ jupyter_namespace }}'
    spark_memory: '{{ jupyter_spark_memory }}'
    spark_hive_metastore_uri: '{{ hive_metastore_endpoint_readonly }}'

- name: Deploy JupyterHub
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: deploy_helm_chart
  vars:
    helm_chart_name: jupyter
    helm_chart_ref: '{{ jupyter_helm_repo_name }}/{{ jupyter_helm_chart_name }}'
    helm_chart_version: '{{ jupyter_helm_chart_version }}'
    helm_chart_namespace: '{{ jupyter_namespace }}'
    helm_repo_name: '{{ jupyter_helm_repo_name }}'
    helm_repo_url: '{{ jupyter_helm_repo_url }}'
    helm_chart_timeout: 15m
    helm_chart_values: "{{ lookup('template', 'values.yaml.j2') | from_yaml }}"
