---
# Main Harbor deployment tasks

- name: Add Harbor Helm repository
  kubernetes.core.helm_repository:
    name: harbor
    repo_url: https://helm.goharbor.io

- name: Create namespace
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: namespace
  vars:
    ns: '{{ harbor_namespace }}'

- name: Check if TLS secret already exists
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: '{{ harbor_namespace }}'
    name: '{{ harbor_tls_secret_name }}'
  register: existing_tls_secret

- name: Generate and create TLS secret if it doesn't exist
  when: existing_tls_secret.resources | length == 0
  block:
    - name: Generate self-signed certificate
      ansible.builtin.shell: |
        # Build SAN list so cert is valid for multiple DNS names
        SAN="DNS:{{ inventory_hostname }}"
        {% if external_url is defined and external_url | length > 0 %}
        SAN="${SAN},DNS:{{ external_url }}"
        {% endif %}
        {% if ansible_host is defined and ansible_host | length > 0 %}
        SAN="${SAN},DNS:{{ ansible_host }}"
        {% endif %}

        # Generate certificate with SANs
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout /tmp/harbor-tls.key \
          -out /tmp/harbor-tls.crt \
          -subj "/CN={{ inventory_hostname }}/O=Scout Harbor" \
          -addext "subjectAltName=${SAN}"
      changed_when: true

    - name: Read certificate file
      ansible.builtin.slurp:
        src: /tmp/harbor-tls.crt
      register: harbor_tls_crt

    - name: Read key file
      ansible.builtin.slurp:
        src: /tmp/harbor-tls.key
      register: harbor_tls_key

    - name: Create TLS secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: '{{ harbor_tls_secret_name }}'
            namespace: '{{ harbor_namespace }}'
          type: kubernetes.io/tls
          data:
            tls.crt: '{{ harbor_tls_crt.content }}'
            tls.key: '{{ harbor_tls_key.content }}'

    - name: Clean up temp cert
      ansible.builtin.file:
        name: /tmp/harbor-tls.crt
        state: absent

    - name: Clean up temp key
      ansible.builtin.file:
        name: /tmp/harbor-tls.key
        state: absent

- name: Set Harbor expose configuration for ingress mode
  ansible.builtin.set_fact:
    harbor_expose_config:
      type: '{{ harbor_expose_type }}'
      tls:
        enabled: true
        certSource: secret
        secret:
          secretName: '{{ harbor_tls_secret_name }}'
      ingress:
        hosts:
          core: '{{ inventory_hostname }}'
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
  when: harbor_expose_type == 'ingress'

- name: Set Harbor expose configuration for nodePort mode
  ansible.builtin.set_fact:
    harbor_expose_config:
      type: '{{ harbor_expose_type }}'
      tls:
        enabled: true
        certSource: secret
        secret:
          secretName: '{{ harbor_tls_secret_name }}'
      nodePort:
        ports:
          https:
            nodePort: '{{ harbor_nodeport_https }}'
  when: harbor_expose_type == 'nodePort'

- name: Install/Upgrade Harbor
  kubernetes.core.helm:
    name: harbor
    chart_ref: harbor/harbor
    chart_version: '{{ harbor_version }}'
    release_namespace: '{{ harbor_namespace }}'
    create_namespace: true
    release_state: present
    update_repo_cache: true
    wait: true
    wait_timeout: 15m
    atomic: true
    values:
      expose: '{{ harbor_expose_config }}'
      externalURL: '{{ harbor_registry_url }}'
      harborAdminPassword: '{{ harbor_admin_password }}'
      chartmuseum:
        enabled: false # Cannot proxy Helm charts

- name: Wait for Harbor to be ready
  ansible.builtin.uri:
    url: '{{ harbor_registry_url }}/api/v2.0/systeminfo'
    validate_certs: false
    status_code: 200
  register: harbor_health
  until: harbor_health.status == 200
  retries: 30
  delay: 10

- name: Create Docker Hub registry endpoint
  ansible.builtin.uri:
    url: '{{ harbor_registry_url }}/api/v2.0/registries'
    validate_certs: false
    method: POST
    user: admin
    password: '{{ harbor_admin_password }}'
    force_basic_auth: true
    body_format: json
    status_code: [201, 409] # 409 = already exists
    body:
      name: dockerhub
      type: docker-hub
      url: https://hub.docker.com
      insecure: false

- name: Create GHCR registry endpoint
  ansible.builtin.uri:
    url: '{{ harbor_registry_url }}/api/v2.0/registries'
    validate_certs: false
    method: POST
    user: admin
    password: '{{ harbor_admin_password }}'
    force_basic_auth: true
    body_format: json
    status_code: [201, 409]
    body:
      name: ghcr
      type: github-ghcr
      url: https://ghcr.io
      insecure: false

- name: Get registries list
  ansible.builtin.uri:
    url: '{{ harbor_registry_url }}/api/v2.0/registries'
    validate_certs: false
    user: admin
    password: '{{ harbor_admin_password }}'
    force_basic_auth: true
  register: registries_response

- name: Extract registry IDs
  ansible.builtin.set_fact:
    dockerhub_registry_id: "{{ registries_response.json | selectattr('name', 'equalto', 'dockerhub') | map(attribute='id') | first }}"
    ghcr_registry_id: "{{ registries_response.json | selectattr('name', 'equalto', 'ghcr') | map(attribute='id') | first }}"

- name: Create Docker Hub proxy cache project
  ansible.builtin.uri:
    url: '{{ harbor_registry_url }}/api/v2.0/projects'
    validate_certs: false
    method: POST
    user: admin
    password: '{{ harbor_admin_password }}'
    force_basic_auth: true
    body_format: json
    status_code: [201, 409]
    body:
      project_name: '{{ harbor_dockerhub_proxy_project }}'
      registry_id: '{{ dockerhub_registry_id }}'
      public: true

- name: Create GHCR proxy cache project
  ansible.builtin.uri:
    url: '{{ harbor_registry_url }}/api/v2.0/projects'
    validate_certs: false
    method: POST
    user: admin
    password: '{{ harbor_admin_password }}'
    force_basic_auth: true
    body_format: json
    status_code: [201, 409]
    body:
      project_name: '{{ harbor_ghcr_proxy_project }}'
      registry_id: '{{ ghcr_registry_id }}'
      public: true

- name: Display Harbor deployment status
  ansible.builtin.debug:
    msg: 'Harbor deployed successfully at {{ harbor_registry_url }}'
