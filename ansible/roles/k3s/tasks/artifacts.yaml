---
# k3s Artifact Preparation
# Handles both online mode (minimal preparation) and air-gapped mode (download all artifacts)
# In air-gapped mode, downloads k3s binary, install script, and SELinux RPMs to control node

################################################################################
# Air-Gapped Mode: Download artifacts to Ansible control node
################################################################################

- name: Prepare artifacts for air-gapped installation
  when: air_gapped | default(false) | bool
  block:
    - name: Detect latest stable k3s version if not specified
      ansible.builtin.uri:
        url: https://update.k3s.io/v1-release/channels/stable
        follow_redirects: safe
        return_content: false
        status_code: [200, 301, 302]
      register: k3s_stable_release
      delegate_to: localhost
      run_once: true
      when: k3s_version is not defined or k3s_version == ''

    - name: Set k3s_version to latest stable if not specified
      ansible.builtin.set_fact:
        k3s_version: "{{ k3s_stable_release.url | regex_search('/tag/(.+)$', '\\1') | first }}"
      when: k3s_version is not defined or k3s_version == ''

    - name: Display k3s version being used
      ansible.builtin.debug:
        msg: 'Installing k3s version: {{ k3s_version }}'
      delegate_to: localhost
      run_once: true

    - name: Create temporary directory for k3s artifacts
      ansible.builtin.tempfile:
        state: directory
        prefix: 'k3s_airgap_'
      register: k3s_temp_dir
      delegate_to: localhost
      run_once: true

    - name: Create temporary directory for SELinux RPMs
      ansible.builtin.tempfile:
        state: directory
        prefix: 'k3s_selinux_'
      register: k3s_selinux_temp_dir
      delegate_to: localhost
      run_once: true
      when: k3s_selinux_enabled | bool

    - name: Create temporary directory for GPU RPMs
      ansible.builtin.tempfile:
        state: directory
        prefix: 'k3s_gpu_'
      register: k3s_gpu_temp_dir
      delegate_to: localhost
      run_once: true
      when: groups['gpu_workers'] | default([]) | length > 0

    - name: Download k3s binary
      ansible.builtin.get_url:
        url: '{{ k3s_binary_base_url }}/{{ k3s_version }}/k3s'
        dest: '{{ k3s_temp_dir.path }}/k3s'
        mode: '0755'
        timeout: '{{ k3s_artifact_download_timeout }}'
      delegate_to: localhost
      run_once: true

    - name: Download k3s install script
      ansible.builtin.get_url:
        url: '{{ k3s_install_script_url }}'
        dest: '{{ k3s_temp_dir.path }}/install-k3s.sh'
        mode: '0755'
        timeout: '{{ k3s_artifact_download_timeout }}'
      delegate_to: localhost
      run_once: true

    - name: Download SELinux RPMs using Kubernetes Job
      ansible.builtin.include_role:
        name: scout_common
        tasks_from: download_rpms_via_job
      vars:
        rpm_job_name: 'k3s-selinux-downloader-{{ ansible_date_time.epoch }}'
        rpm_staging_dir: '/tmp/k3s-selinux-rpms-{{ ansible_date_time.epoch }}'
        rpm_package_type: 'SELinux'
        rpm_download_script: |
          set -e
          set -x
          echo "Installing dnf-plugins-core for dnf download..."
          dnf install -y dnf-plugins-core
          echo "Configuring Rancher k3s repository..."
          cat > /etc/yum.repos.d/rancher-k3s-common.repo <<EOF
          [rancher-k3s-common-{{ k3s_selinux_channel }}]
          name=Rancher K3s Common ({{ k3s_selinux_channel }})
          baseurl=https://{{ k3s_selinux_rpm_site }}/k3s/{{ k3s_selinux_channel }}/common/centos/9/noarch
          enabled=1
          gpgcheck=1
          repo_gpgcheck=0
          gpgkey=https://{{ k3s_selinux_rpm_site }}/public.key
          EOF
          echo "Repository configuration:"
          cat /etc/yum.repos.d/rancher-k3s-common.repo
          echo "Downloading k3s-selinux and ALL dependencies..."
          mkdir -p /downloads
          dnf download --resolve --destdir=/downloads k3s-selinux
          echo "All downloaded packages (including dependencies):"
          ls -lh /downloads/
          rpm_count=$(ls /downloads/*.rpm 2>/dev/null | wc -l)
          echo "Package count: $rpm_count"
          if [ "$rpm_count" -eq 0 ]; then
            echo "ERROR: No RPM files were downloaded!"
            exit 1
          fi
          echo "Download completed successfully with $rpm_count packages"
        rpm_artifact_dir: '{{ k3s_selinux_temp_dir.path }}'
      when: k3s_selinux_enabled | bool

    - name: Download GPU packages using Kubernetes Job
      ansible.builtin.include_role:
        name: scout_common
        tasks_from: download_rpms_via_job
      vars:
        rpm_job_name: 'k3s-gpu-downloader-{{ ansible_date_time.epoch }}'
        rpm_staging_dir: '/tmp/k3s-gpu-rpms-{{ ansible_date_time.epoch }}'
        rpm_package_type: 'GPU'
        rpm_download_script: |
          set -e
          set -x
          echo "Installing dnf-plugins-core for dnf download..."
          dnf install -y dnf-plugins-core
          echo "Adding NVIDIA container toolkit repository..."
          dnf config-manager --add-repo https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo
          echo "Repository configuration:"
          cat /etc/yum.repos.d/nvidia-container-toolkit.repo
          echo "Downloading NVIDIA container toolkit packages and ALL dependencies..."
          mkdir -p /downloads
          dnf download --resolve --destdir=/downloads \
            nvidia-container-toolkit \
            nvidia-container-toolkit-base \
            libnvidia-container-tools \
            libnvidia-container1
          echo "All downloaded packages (including dependencies):"
          ls -lh /downloads/
          rpm_count=$(ls /downloads/*.rpm 2>/dev/null | wc -l)
          echo "Package count: $rpm_count"
          if [ "$rpm_count" -eq 0 ]; then
            echo "ERROR: No RPM files were downloaded!"
            exit 1
          fi
          echo "Download completed successfully with $rpm_count packages"
        rpm_artifact_dir: '{{ k3s_gpu_temp_dir.path }}'
      when: groups['gpu_workers'] | default([]) | length > 0

    - name: Verify k3s binary was downloaded
      ansible.builtin.stat:
        path: '{{ k3s_temp_dir.path }}/k3s'
      register: k3s_binary_stat
      delegate_to: localhost
      run_once: true

    - name: Verify install script was downloaded
      ansible.builtin.stat:
        path: '{{ k3s_temp_dir.path }}/install-k3s.sh'
      register: k3s_install_script_stat
      delegate_to: localhost
      run_once: true

    - name: Fail if required artifacts are missing
      ansible.builtin.fail:
        msg: 'Required artifact missing: {{ item.name }}'
      when: not item.stat.stat.exists
      loop:
        - name: k3s binary
          stat: '{{ k3s_binary_stat }}'
        - name: install script
          stat: '{{ k3s_install_script_stat }}'
      delegate_to: localhost
      run_once: true

    - name: Set facts with temp directory paths
      ansible.builtin.set_fact:
        k3s_artifact_temp_dir: '{{ k3s_temp_dir.path }}'
        k3s_selinux_artifact_dir: '{{ k3s_selinux_temp_dir.path | default("") }}'
        k3s_gpu_artifact_dir: '{{ k3s_gpu_temp_dir.path | default("") }}'
      # Note: NO delegate_facts, NO delegate_to
      # This allows the facts to be shared with all hosts

################################################################################
# Air-Gapped Mode: Copy artifacts to target nodes
################################################################################

- name: Copy artifacts to target nodes (air-gapped mode)
  when: air_gapped | default(false) | bool
  block:
    - name: Copy k3s binary to node
      ansible.builtin.copy:
        src: '{{ k3s_artifact_temp_dir }}/k3s'
        dest: '{{ k3s_binary_path }}'
        mode: '0755'

    - name: Copy k3s install script to node
      ansible.builtin.copy:
        src: '{{ k3s_artifact_temp_dir }}/install-k3s.sh'
        dest: '{{ k3s_install_script_path }}'
        mode: '0755'

################################################################################
# Online Mode: No artifact preparation needed
################################################################################

- name: Online mode artifact preparation complete
  ansible.builtin.debug:
    msg: 'Online mode: artifacts will be downloaded during installation by get.k3s.io script'
  when: not (air_gapped | default(false) | bool)
