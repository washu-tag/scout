---
# MinIO Operator and Tenant deployment
- name: Set up storage
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: storage_setup
  vars:
    storage_definitions: '{{ minio_storage_definitions }}'

- name: Deploy MinIO Operator
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: deploy_helm_chart
  vars:
    helm_chart_name: minio-operator
    helm_chart_ref: minio-operator/operator
    helm_chart_version: '{{ minio_version }}'
    helm_chart_namespace: '{{ minio_operator_namespace }}'
    helm_repo_name: minio-operator
    helm_repo_url: https://operator.min.io

- name: Create tenant namespace
  kubernetes.core.k8s:
    name: '{{ minio_tenant_namespace }}'
    api_version: v1
    kind: Namespace
    state: present

- name: Set up environment secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ minio_env_secret_name | default('minio-env-configuration') }}"
        namespace: '{{ minio_tenant_namespace }}'
      type: Opaque
      stringData:
        config.env: |
          export MINIO_ROOT_USER={{ s3_username }}
          export MINIO_ROOT_PASSWORD={{ s3_password }}
          export MINIO_REGION_NAME={{ s3_region }}
          export MINIO_REGION={{ s3_region }}
          {% if minio_oidc_enabled %}
          export MINIO_IDENTITY_OPENID_CONFIG_URL_PRIMARY_IAM="{{ keycloak_wellknown_url }}"
          export MINIO_IDENTITY_OPENID_CLIENT_ID_PRIMARY_IAM="{{ keycloak_minio_client_id }}"
          export MINIO_IDENTITY_OPENID_CLIENT_SECRET_PRIMARY_IAM="{{ keycloak_minio_client_secret }}"
          export MINIO_IDENTITY_OPENID_DISPLAY_NAME_PRIMARY_IAM="Keycloak SSO"
          export MINIO_IDENTITY_OPENID_SCOPES_PRIMARY_IAM="openid,microprofile-jwt"
          export MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC_PRIMARY_IAM="on"
          export MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC="on"
          {% endif %}

- name: Create MinIO user credential secrets
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: '{{ item.access_key }}-creds'
        namespace: '{{ minio_tenant_namespace }}'
      type: Opaque
      stringData:
        CONSOLE_ACCESS_KEY: '{{ item.access_key }}'
        CONSOLE_SECRET_KEY: '{{ item.secret_key }}'
  loop: '{{ minio_users }}'

- name: Deploy MinIO Tenant
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: deploy_helm_chart
  vars:
    helm_chart_name: '{{ minio_tenant_namespace }}'
    helm_chart_ref: minio-operator/tenant
    helm_chart_version: '{{ minio_version }}'
    helm_chart_namespace: '{{ minio_tenant_namespace }}'
    helm_repo_name: minio-operator
    helm_repo_url: https://operator.min.io
    helm_chart_create_namespace: false
    helm_chart_values:
      tenant:
        name: '{{ minio_tenant_name }}'
        configSecret:
          name: "{{ minio_env_secret_name | default('minio-env-configuration') }}"
          existingSecret: true
        env: '{{ minio_env_variables }}'
        pools:
          - servers: '{{ groups["minio_hosts"] | length | default(1) }}'
            name: pool-0
            volumesPerServer: '{{ minio_volumes_per_server | default(1) }}'
            size: '{{ minio_storage_size }}'
            storageClassName: '{{ use_custom_storage_classes | ternary(minio_storage_class, omit) }}'
            resources: '{{ minio_resources }}'
            tolerations:
              # Ensure MinIO pods can run on control plane nodes
              - key: 'node-role.kubernetes.io/control-plane'
                operator: Exists
                effect: PreferNoSchedule
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchLabels:
                        v1.min.io/tenant: scout
                    topologyKey: kubernetes.io/hostname
        metrics:
          enabled: true
          port: 9000
          protocol: http
        certificate:
          requestAutoCert: false
        buckets: '{{ minio_buckets }}'
        users: '{{ minio_credentials }}'
      ingress: '{{ minio_ingress_config }}'

- name: Wait for MinIO StatefulSet to exist
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: StatefulSet
    name: '{{ minio_tenant_name }}-pool-0'
    namespace: '{{ minio_tenant_namespace }}'
  register: minio_statefulset
  until: minio_statefulset.resources | length > 0
  retries: '{{ minio_wait_retries | default(60) }}'
  delay: '{{ minio_wait_delay | default(5) }}'
  changed_when: false

- name: Wait for MinIO StatefulSet to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: StatefulSet
    name: '{{ minio_tenant_name }}-pool-0'
    namespace: '{{ minio_tenant_namespace }}'
  register: minio_statefulset
  until:
    - minio_statefulset.resources[0].status.readyReplicas is defined
    - minio_statefulset.resources[0].status.readyReplicas == minio_statefulset.resources[0].status.replicas
  retries: '{{ minio_wait_retries | default(60) }}'
  delay: '{{ minio_wait_delay | default(5) }}'
  changed_when: false

- name: Create MinIO policy JSON ConfigMaps
  kubernetes.core.k8s:
    state: present
    definition: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: policy-{{ item.name }}
        namespace: {{ minio_tenant_namespace }}
      data:
        {{ item.name }}.json: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": {{ item.actions | to_json }},
                "Resource": {{ item.resources | to_json }}
              }
            ]
          }
  loop: '{{ minio_policies }}'

- name: Build list of projected ConfigMaps for MinIO policies
  set_fact:
    policy_sources: >-
      {{
        policy_sources | default([]) +
        [ { 'configMap': { 'name': 'policy-' + item.name } } ]
      }}
  loop: '{{ minio_policies }}'

- name: Bootstrap MinIO IAM (policies + bindings)
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: bootstrap-minio-iam
        namespace: '{{ minio_tenant_namespace }}'
        labels:
          app: minio-bootstrap
        # Add a unique value to force job recreation when policies change
        annotations:
          minio-iam-config-hash: "{{ minio_policies | to_json | hash('md5') }}"
      spec:
        ttlSecondsAfterFinished: 600
        backoffLimit: 3
        template:
          metadata:
            labels:
              app: minio-bootstrap
          spec:
            restartPolicy: Never
            serviceAccountName: '{{ minio_tenant_name }}-sa'
            containers:
              - name: mc
                image: '{{ minio_client_image }}'
                command: ['/bin/sh', '-c']
                args:
                  - |
                    set -euo pipefail
                    # Source environment variables
                    . /rootcreds/config.env

                    # Set up MinIO client
                    mc alias set local http://{{ minio_tenant_name }}-hl.{{ minio_tenant_namespace }}:9000 \
                      "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD" --insecure

                    # Apply policies and attach to users
                    {% for p in minio_policies %}
                    echo "Creating policy {{ p.name }}..."
                    mc admin policy create local {{ p.name }} /policies/{{ p.name }}.json
                    mc admin policy attach local {{ p.name }} --user {{ p.user }}
                    mc admin policy detach local consoleAdmin --user {{ p.user }}
                    {% endfor %}

                    echo "MinIO IAM setup completed successfully"
                volumeMounts:
                  - name: policies
                    mountPath: /policies
                    readOnly: true
                  - name: rootcreds
                    mountPath: /rootcreds
                    readOnly: true
            volumes:
              - name: policies
                projected:
                  defaultMode: 0644
                  sources: '{{ policy_sources }}'
              - name: rootcreds
                secret:
                  secretName: "{{ minio_env_secret_name | default('minio-env-configuration') }}"
                  items:
                    - key: config.env
                      path: config.env

- name: Wait for bootstrap job to complete
  kubernetes.core.k8s_info:
    api_version: batch/v1
    kind: Job
    name: bootstrap-minio-iam
    namespace: '{{ minio_tenant_namespace }}'
  register: minio_bootstrap_job
  until:
    - minio_bootstrap_job.resources | length > 0
    - minio_bootstrap_job.resources[0].status.succeeded is defined
    - minio_bootstrap_job.resources[0].status.succeeded == 1
  retries: '{{ minio_bootstrap_wait_retries | default(30) }}'
  delay: '{{ minio_bootstrap_wait_delay | default(10) }}'
  changed_when: false
