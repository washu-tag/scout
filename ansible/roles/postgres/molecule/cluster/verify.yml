---
# Verify playbook - validates that postgres deployed correctly to cluster
# Checks K8s resources, namespace, secrets, and postgres cluster

- name: Verify
  hosts: localhost
  gather_facts: false
  environment:
    KUBECONFIG: '{{ kubeconfig_yaml }}'
    K8S_AUTH_KUBECONFIG: '{{ kubeconfig_yaml }}'

  tasks:
    - name: Check if namespace was created
      ansible.builtin.command:
        cmd: 'kubectl get namespace {{ postgres_cluster_namespace }}'
      register: namespace_check
      changed_when: false

    - name: Verify namespace exists
      ansible.builtin.assert:
        that:
          - namespace_check.rc == 0
        fail_msg: 'Namespace {{ postgres_cluster_namespace }} was not created'
        success_msg: '✓ Namespace {{ postgres_cluster_namespace }} exists'

    - name: Check postgres user secret
      ansible.builtin.command:
        cmd: 'kubectl get secret postgres-user -n {{ postgres_cluster_namespace }}'
      register: user_secret_check
      changed_when: false

    - name: Verify postgres user secret exists
      ansible.builtin.assert:
        that:
          - user_secret_check.rc == 0
        fail_msg: 'Postgres user secret was not created'
        success_msg: '✓ Postgres user secret exists'

    - name: Check postgres superuser secret
      ansible.builtin.command:
        cmd: 'kubectl get secret superuser-secret -n {{ postgres_cluster_namespace }}'
      register: superuser_secret_check
      changed_when: false

    - name: Verify superuser secret exists
      ansible.builtin.assert:
        that:
          - superuser_secret_check.rc == 0
        fail_msg: 'Postgres superuser secret was not created'
        success_msg: '✓ Postgres superuser secret exists'

    - name: Check storage class
      ansible.builtin.command:
        cmd: 'kubectl get storageclass {{ postgres_storage_class }}'
      register: storage_class_check
      changed_when: false

    - name: Verify storage class exists
      ansible.builtin.assert:
        that:
          - storage_class_check.rc == 0
        fail_msg: 'Storage class {{ postgres_storage_class }} was not created'
        success_msg: '✓ Storage class {{ postgres_storage_class }} exists'

    - name: Check persistent volume
      ansible.builtin.command:
        cmd: 'kubectl get pv postgres-pv'
      register: pv_check
      changed_when: false

    - name: Verify persistent volume exists
      ansible.builtin.assert:
        that:
          - pv_check.rc == 0
        fail_msg: 'Persistent volume postgres-pv was not created'
        success_msg: '✓ Persistent volume postgres-pv exists'

    - name: Check postgres cluster resource
      ansible.builtin.command:
        cmd: 'kubectl get cluster postgresql-cluster -n {{ postgres_cluster_namespace }}'
      register: cluster_check
      changed_when: false

    - name: Verify postgres cluster exists
      ansible.builtin.assert:
        that:
          - cluster_check.rc == 0
        fail_msg: 'Postgres cluster resource was not created'
        success_msg: '✓ Postgres cluster resource exists'

    - name: Check metrics service
      ansible.builtin.command:
        cmd: 'kubectl get service postgresql-cluster-metrics -n {{ postgres_cluster_namespace }}'
      register: metrics_service_check
      changed_when: false

    - name: Verify metrics service exists
      ansible.builtin.assert:
        that:
          - metrics_service_check.rc == 0
        fail_msg: 'Metrics service was not created'
        success_msg: '✓ Metrics service exists'

    - name: Wait for postgres cluster to be ready
      ansible.builtin.command:
        cmd: "kubectl get cluster postgresql-cluster -n {{ postgres_cluster_namespace }} -o jsonpath='{.status.phase}'"
      register: cluster_status
      until: cluster_status.stdout == "Cluster in healthy state"
      retries: 60
      delay: 5
      changed_when: false
      failed_when: false

    - name: Display cluster status
      ansible.builtin.debug:
        msg: 'Postgres cluster status: {{ cluster_status.stdout }}'

    - name: Check if test directory was created
      ansible.builtin.stat:
        path: '{{ postgres_dir }}'
      register: postgres_dir_stat

    - name: Verify test directory exists
      ansible.builtin.assert:
        that:
          - postgres_dir_stat.stat.exists
          - postgres_dir_stat.stat.isdir
        fail_msg: 'Postgres directory should have been created'
        success_msg: '✓ Postgres directory was created successfully'
