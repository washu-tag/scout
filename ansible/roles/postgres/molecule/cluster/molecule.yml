---
# Cluster scenario - Integration tests against real Kubernetes cluster
# Tests actual deployment to K8s (local k3s or remote cluster)

dependency:
  name: galaxy
  options:
    requirements-file: requirements.yml

driver:
  name: default

platforms:
  - name: localhost
    groups:
      - k3s_cluster
      - server

provisioner:
  name: ansible
  env:
    # Use KUBECONFIG from environment, fallback to default
    KUBECONFIG: '${KUBECONFIG:-~/.kube/config}'
    K8S_AUTH_KUBECONFIG: '${KUBECONFIG:-~/.kube/config}'
  config_options:
    defaults:
      roles_path: ${MOLECULE_PROJECT_DIRECTORY}/..
      interpreter_python: auto_silent
  inventory:
    group_vars:
      all:
        # Connection
        ansible_connection: local
        gather_facts: false

        # Use Python from the current environment (uvx virtualenv)
        ansible_python_interpreter: '{{ ansible_playbook_python }}'

        # Kubeconfig from environment
        kubeconfig_yaml: '${KUBECONFIG:-~/.kube/config}'

        # Test paths (created by prepare.yml)
        postgres_dir: /tmp/molecule_postgres_cluster_test

        # Test namespace (isolated from production)
        postgres_cluster_namespace: postgres-molecule-test

        # Test credentials
        postgres_user: molecule_test_user
        postgres_password: molecule_test_pass_123
        postgres_superuser_password: molecule_super_pass_123
        hive_postgres_user: molecule_hive
        hive_postgres_password: molecule_hive_pass_123
        superset_postgres_user: molecule_superset
        superset_postgres_password: molecule_superset_pass_123

        # Test database
        ingest_postgres_table_name: molecule_ingest_test

        # Minimal resources for testing
        postgres_resources: {}
        postgres_storage_size: 1Gi

verifier:
  name: ansible
