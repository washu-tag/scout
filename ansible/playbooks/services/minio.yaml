- name: Add Minio Helm repository
  kubernetes.core.helm_repository:
    name: minio-operator
    repo_url: https://operator.min.io

- name: Install/Upgrade Minio Operator
  kubernetes.core.helm:
    name: minio-operator
    chart_ref: minio-operator/operator
    chart_version: ~7.1.0
    release_namespace: minio-operator
    create_namespace: true
    release_state: present
    update_repo_cache: true
    wait: true
    wait_timeout: 1m
    atomic: true

- name: Create namespace
  kubernetes.core.k8s:
    name: '{{ minio_tenant_namespace }}'
    api_version: v1
    kind: Namespace
    state: present

- name: Create Traefik Middleware to add trailing slash that Minio needs
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: minio-add-trailing-slash
        namespace: kube-system
      spec:
        redirectRegex:
          regex: (.*/minio$)
          replacement: ${1}/
          permanent: true

- name: Create Traefik Middleware to strip /minio prefix for internal traffic
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: minio-strip-prefix
        namespace: kube-system
      spec:
        stripPrefix:
          prefixes:
            - /minio

- name: Setup storage
  include_tasks: tasks/storage_setup.yaml
  vars:
    storage_definitions:
      - name: minio
        size: '750Gi'
        path: '{{ minio_dir }}'

- name: Set up env secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: minio-scout-env-configuration
        namespace: '{{ minio_tenant_namespace }}'
      type: Opaque
      stringData:
        config.env: |
          export MINIO_ROOT_USER={{ s3_username }}
          export MINIO_ROOT_PASSWORD={{ s3_password }}
          export MINIO_REGION_NAME={{ s3_region }}
          export MINIO_REGION={{ s3_region }}

- name: Define MinIO IAM policies
  set_fact:
    minio_policies:
      - name: lake-r
        actions:
          - s3:GetObject
          - s3:ListBucket
          - s3:GetBucketLocation
          - s3:ListBucketMultipartUploads
        resources:
          - arn:aws:s3:::lake
          - arn:aws:s3:::lake/*
        user: '{{ s3_lake_reader }}'
      - name: lake-rw
        actions:
          - s3:*
        resources:
          - arn:aws:s3:::lake
          - arn:aws:s3:::lake/*
          - arn:aws:s3:::scratch
          - arn:aws:s3:::scratch/*
        user: '{{ s3_lake_writer }}'
      - name: loki-rw
        actions:
          - s3:*
        resources:
          - arn:aws:s3:::loki-*
          - arn:aws:s3:::loki-*/*
        user: '{{ s3_loki_writer }}'

- name: Create MinIO policy JSON ConfigMaps
  kubernetes.core.k8s:
    state: present
    definition: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: policy-{{ item.name }}
        namespace: {{ minio_tenant_namespace }}
      data:
        {{ item.name }}.json: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": {{ item.actions | to_json }},
                "Resource": {{ item.resources | to_json }}
              }
            ]
          }
  loop: '{{ minio_policies }}'

- name: Create MinIO user credential secrets
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: '{{ item.access_key }}-creds'
        namespace: '{{ minio_tenant_namespace }}'
      type: Opaque
      stringData:
        CONSOLE_ACCESS_KEY: '{{ item.access_key }}'
        CONSOLE_SECRET_KEY: '{{ item.secret_key }}'
  loop:
    - access_key: '{{ s3_lake_reader }}'
      secret_key: '{{ s3_lake_reader_secret }}'
    - access_key: '{{ s3_lake_writer }}'
      secret_key: '{{ s3_lake_writer_secret }}'
    - access_key: '{{ s3_loki_writer }}'
      secret_key: '{{ s3_loki_writer_secret }}'

- name: Install/Upgrade Minio Tenant
  kubernetes.core.helm:
    name: '{{ minio_tenant_namespace }}'
    chart_ref: minio-operator/tenant
    chart_version: ~7.1.0
    release_namespace: '{{ minio_tenant_namespace }}'
    release_state: present
    update_repo_cache: true
    wait: true
    wait_timeout: 5m
    atomic: true
    values:
      tenant:
        name: minio-scout
        configSecret:
          name: minio-scout-env-configuration
          existingSecret: true
        env:
          - name: MINIO_BROWSER_REDIRECT_URL
            value: 'https://{{ server_hostname }}/minio/'
          - name: MINIO_PROMETHEUS_AUTH_TYPE
            value: public
        pools:
          - servers: 1
            name: pool-0
            volumesPerServer: 1
            size: 750Gi
            storageClassName: minio-storage
        metrics:
          enabled: true
          port: 9000
          protocol: http
        certificate:
          requestAutoCert: false
        buckets:
          - name: loki-chunks
          - name: loki-ruler
          - name: loki-admin
          - name: lake
          - name: scratch
        users:
          - name: '{{ s3_lake_reader }}-creds'
          - name: '{{ s3_lake_writer }}-creds'
          - name: '{{ s3_loki_writer }}-creds'
      ingress:
        console:
          enabled: true
          ingressClassName: traefik
          host: '{{ server_hostname }}'
          path: /minio
          pathType: Prefix
          annotations:
            traefik.ingress.kubernetes.io/router.middlewares: >
              kube-system-minio-add-trailing-slash@kubernetescrd,
              kube-system-minio-strip-prefix@kubernetescrd

- name: Wait for MinIO to be ready
  command: 'kubectl -n {{ minio_tenant_namespace }} wait --for=condition=Ready --timeout=300s statefulset/minio-scout-pool-0'
  register: minio_ready
  changed_when: false

- name: Bootstrap MinIO IAM (policies + bindings)
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: bootstrap-minio-iam
        namespace: '{{ minio_tenant_namespace }}'
      spec:
        ttlSecondsAfterFinished: 600
        template:
          spec:
            restartPolicy: Never
            serviceAccountName: minio-scout-sa
            containers:
              - name: mc
                image: quay.io/minio/mc:RELEASE.2025-04-16T18-13-26Z
                command: ["/bin/sh","-c"]
                args:
                  - |
                    set -euo pipefail
                    . /rootcreds/config.env
                    mc alias set local http://minio-scout-hl.{{ minio_tenant_namespace }}:9000  "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD" --insecure
                    {% for p in minio_policies %}
                    mc admin policy create local {{ p.name }} /policies/{{ p.name }}.json
                    mc admin policy attach local {{ p.name }} --user {{ p.user }}
                    {% endfor %}
                volumeMounts:
                  - name: policies
                    mountPath: /policies
                    readOnly: true
                  - name: rootcreds
                    mountPath: /rootcreds
                    readOnly: true
            volumes:
              - name: policies
                projected:
                  defaultMode: 0644
                  sources:
                    - configMap:
                        name: policy-lake-r
                    - configMap:
                        name: policy-lake-rw
                    - configMap:
                        name: policy-loki-rw
              - name: rootcreds
                secret:
                  secretName: minio-scout-env-configuration
                  items:
                    - key: config.env
                      path: config.env

- name: Wait for job to complete
  command: 'kubectl -n {{ minio_tenant_namespace }} wait --for=condition=complete --timeout=300s job/bootstrap-minio-iam'
  register: minio_bootstrap_complete
  changed_when: false