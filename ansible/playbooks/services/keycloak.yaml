---
- name: Install Keycloak
  hosts: server
  gather_facts: false
  environment:
    HELM_PLUGINS: '{{ helm_plugins_dir }}'
    KUBECONFIG: '{{ kubeconfig_yaml }}'
  tasks:
    - name: Apply Keycloak CRD
      delegate_to: localhost
      no_log: true
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.3.2/kubernetes/keycloaks.k8s.keycloak.org-v1.yml

    - name: Apply Keycloak KeycloakRealmImport CRD
      delegate_to: localhost
      no_log: true
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.3.2/kubernetes/keycloakrealmimports.k8s.keycloak.org-v1.yml

    - name: Create Keycloak CR namespace
      delegate_to: localhost
      kubernetes.core.k8s:
        name: '{{ keycloak_namespace }}'
        api_version: v1
        kind: Namespace
        state: present

    - name: Apply Keycloak Operator
      delegate_to: localhost
      no_log: true
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.3.2/kubernetes/kubernetes.yml
        namespace: '{{ keycloak_namespace }}'

    - name: Wait for Keycloak Operator to be ready
      delegate_to: localhost
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: keycloak-operator
        namespace: '{{ keycloak_namespace }}'
        wait: true
        wait_condition:
          type: Progressing
          status: 'True'
          reason: NewReplicaSetAvailable
        wait_timeout: 300

    - name: Setup PostgreSQL database and user
      block:
        - name: Create user (ignore if exists)
          delegate_to: localhost
          kubernetes.core.k8s_exec:
            namespace: '{{ postgres_cluster_namespace }}'
            pod: '{{ postgres_cluster_name }}-1'
            command: |
              psql --dbname=postgres -c "CREATE USER {{ keycloak_postgres_user }} WITH PASSWORD '{{ keycloak_postgres_password }}';"
          register: user_result
          failed_when:
            - user_result.rc != 0
            - '"already exists" not in user_result.stderr'

        - name: Create database (ignore if exists)
          delegate_to: localhost
          kubernetes.core.k8s_exec:
            namespace: '{{ postgres_cluster_namespace }}'
            pod: '{{ postgres_cluster_name }}-1'
            command: |
              psql --dbname=postgres -c "CREATE DATABASE keycloak WITH ENCODING 'UTF8' OWNER {{ keycloak_postgres_user }};"
          register: db_result
          failed_when:
            - db_result.rc != 0
            - '"already exists" not in db_result.stderr'

    - name: Create Keycloak DB secret
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        namespace: '{{ keycloak_namespace }}'
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: keycloak-db-secret
          type: Opaque
          stringData:
            username: '{{ keycloak_postgres_user }}'
            password: '{{ keycloak_postgres_password }}'

    - name: Create Keycloak Admin secret
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        namespace: '{{ keycloak_namespace }}'
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: keycloak-admin-secret
          type: Opaque
          stringData:
            username: '{{ keycloak_bootstrap_admin_user }}'
            password: '{{ keycloak_bootstrap_admin_password }}'

    - name: Create Keycloak CR
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        namespace: '{{ keycloak_namespace }}'
        definition:
          apiVersion: k8s.keycloak.org/v2alpha1 # TODO: Alpha? Look for stable version
          kind: Keycloak
          metadata:
            name: keycloak
          spec:
            instances: 1
            image: '{{ keycloak_image | default("ghcr.io/washu-tag/keycloak:1.1.0") }}'
            bootstrapAdmin:
              user:
                secret: keycloak-admin-secret
            db:
              vendor: postgres
              usernameSecret:
                name: keycloak-db-secret
                key: username
              passwordSecret:
                name: keycloak-db-secret
                key: password
              host: 'postgresql-cluster-rw.{{ postgres_cluster_namespace }}'
              database: keycloak
              port: 5432
            http:
              httpEnabled: true
            hostname:
              hostname: '{{ server_hostname }}'
            ingress:
              enabled: false
            proxy:
              headers: xforwarded
            additionalOptions:
              - name: http-relative-path
                value: /kc
              - name: metrics-enabled
                value: 'true'
              - name: event-metrics-user-enabled
                value: 'true'
              - name: event-metrics-user-tags
                value: 'realm,idp,clientId'
              - name: spi-events-listener-jboss-logging-success-level
                value: info
                # Hacky way to get an env variable into the Keycloak pod until the operator supports it natively
              - name: scout-url
                value: '{{ server_hostname }}'

    - name: Debug - Wait 60s before checking Keycloak status
      delegate_to: localhost
      ansible.builtin.pause:
        seconds: 60

    - name: Debug - All Keycloak pod logs
      delegate_to: localhost
      ignore_errors: true
      ansible.builtin.shell: |
        for pod in $(kubectl get pods -n '{{ keycloak_namespace }}' -o jsonpath='{.items[*].metadata.name}'); do
          echo "==== $pod ===="
          kubectl -n {{ keycloak_namespace }} logs $pod || true
          echo "-----";
        done

    # The operator wants to use a subdomain and does not appear to support a path-based ingress
    - name: Create Keycloak Ingress
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        namespace: '{{ keycloak_namespace }}'
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: keycloak-ingress
            namespace: '{{ keycloak_namespace }}'
          spec:
            ingressClassName: traefik
            rules:
              - host: '{{ server_hostname }}'
                http:
                  paths:
                    - backend:
                        service:
                          name: keycloak-service
                          port:
                            name: http
                      path: /kc
                      pathType: Prefix

    - name: Wait for Keycloak to be ready
      delegate_to: localhost
      shell: >-
        kubectl wait --for=condition=Ready --timeout=5m keycloak/keycloak -n {{ keycloak_namespace }}
      register: keycloak_ready
      changed_when: false
      until: keycloak_ready is succeeded

    - name: Create Keycloak Config as a Secret
      delegate_to: localhost
      no_log: true
      kubernetes.core.k8s:
        state: present
        namespace: '{{ keycloak_namespace }}'
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: keycloak-config
          data:
            scout-realm.json: "{{ lookup('template', 'templates/keycloak/scout-realm.json.j2') | b64encode }}"

    # https://github.com/adorsys/keycloak-config-cli/issues/1287
    - name: Download Keycloak Config CLI Helm chart
      delegate_to: localhost
      ansible.builtin.get_url:
        url: https://adorsys.github.io/keycloak-config-cli/helm-charts/keycloak-config-cli-6.4.1-SNAPSHOT.tgz
        dest: /tmp/keycloak-config-cli-6.4.1-SNAPSHOT.tgz
        mode: '0644'

    - name: Run Keycloak Config CLI to Configure Keycloak
      delegate_to: localhost
      kubernetes.core.helm:
        name: keycloak-config-cli
        release_namespace: '{{ keycloak_namespace }}'
        create_namespace: true
        chart_ref: /tmp/keycloak-config-cli-6.4.1-SNAPSHOT.tgz
        state: present
        wait: true
        wait_timeout: 5m
        atomic: true
        values:
          image:
            repository: 'docker.io/adorsys/keycloak-config-cli'
            tag: '6.4.0-26'
          existingConfigSecret: 'keycloak-config'
          env:
            KEYCLOAK_URL: 'http://keycloak-service.{{ keycloak_namespace }}:8080/kc'
            KEYCLOAK_USER: '{{ keycloak_bootstrap_admin_user }}'
          existingSecret: keycloak-admin-secret
