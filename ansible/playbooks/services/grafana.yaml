---
- name: Create Loki namespace
  kubernetes.core.k8s:
    name: '{{ loki_namespace }}'
    api_version: v1
    kind: Namespace
    state: present

- name: Create S3 secret for Loki
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: loki-secrets
        namespace: '{{ loki_namespace }}'
      type: Opaque
      stringData:
        AWS_ACCESS_KEY_ID: '{{ s3_loki_writer }}'
        AWS_SECRET_ACCESS_KEY: '{{ s3_loki_writer_secret }}'

- name: Deploy Loki
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: deploy_helm_chart
  vars:
    helm_chart_name: loki
    helm_chart_ref: grafana/loki
    helm_chart_namespace: '{{ loki_namespace }}'
    helm_repo_name: grafana
    helm_repo_url: https://grafana.github.io/helm-charts
    helm_chart_version: '~6.29.0'
    helm_chart_create_namespace: false
    helm_chart_values: "{{ lookup('template', 'templates/loki.values.yaml.j2') | from_yaml }}"

- name: Deploy Promtail
  ansible.builtin.include_role:
    name: scout_common
    tasks_from: deploy_helm_chart
  vars:
    helm_chart_name: promtail
    helm_chart_ref: grafana/promtail
    helm_chart_namespace: '{{ loki_namespace }}'
    helm_repo_name: grafana
    helm_repo_url: https://grafana.github.io/helm-charts
    helm_chart_version: '~6.16.6'
    helm_chart_create_namespace: false
    helm_chart_values:
      promtail:
        enabled: true
        config:
          clients:
            - url: 'http://loki-gateway.{{ loki_namespace }}.svc.cluster.local:3100/loki/api/v1/push'

- name: Create Grafana namespace
  kubernetes.core.k8s:
    name: '{{ grafana_namespace }}'
    api_version: v1
    kind: Namespace
    state: present

- name: Create SMTP secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: smtp-grafana
        namespace: '{{ grafana_namespace }}'
        labels:
          grafana_alert: '1'
      type: Opaque
      stringData:
        user: '{{ grafana_smtp_user }}'
        password: '{{ grafana_smtp_password }}'
  when: grafana_alert_contact_point == 'email'

- name: Configure and install Grafana
  delegate_to: localhost
  environment:
    KUBECONFIG: '{{ local_kubeconfig_yaml }}'
  block:
    - name: Find all Grafana dashboards
      find:
        paths: '{{ playbook_dir }}/files/grafana/dashboards/'
        patterns: '*.json'
      register: dashboard_files

    - name: Create ConfigMap for each Grafana dashboard
      no_log: true
      kubernetes.core.k8s:
        state: present
        definition: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: '{{ item.path | basename | regex_replace(".json$", "") }}'
            namespace: '{{ grafana_namespace }}'
            labels:
              grafana_dashboard: '1'
          data:
            '{{ item.path | basename }}':
              {{ lookup("file", item.path) | to_nice_json }}
      loop: '{{ dashboard_files.files }}'
      loop_control:
        label: '{{ item.path | basename }}'

    - name: Find all Grafana alerts
      find:
        paths: '{{ playbook_dir }}/templates/grafana/alerts/'
        patterns: '*.json.j2'
      register: alert_templates

    - name: Create ConfigMap for each Grafana alert
      kubernetes.core.k8s:
        state: present
        definition: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: '{{ item.path | basename | regex_replace(".json.j2$", "") }}'
            namespace: '{{ grafana_namespace }}'
            labels:
              grafana_alert: '1'
          data:
            '{{ item.path | basename | regex_replace(".json.j2$", ".json") }}':
              '{{ lookup("template", item.path) | to_nice_json }}'
      loop: '{{ alert_templates.files }}'
      loop_control:
        label: '{{ item.path | basename }}'

    - name: Create Grafana notification policy as ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: notification-policy
            namespace: '{{ grafana_namespace }}'
            labels:
              grafana_alert: '1'
          data:
            notification-policy.yaml: "{{ lookup('template', 'templates/grafana/notification-policy.yaml.j2') }}"

    - name: Find all Grafana contact points
      find:
        paths: '{{ playbook_dir }}/templates/grafana/contact-points/'
        patterns: '*.json.j2'
      register: contact_point_templates

    - name: Create Secret for each Grafana contact point
      kubernetes.core.k8s:
        state: present
        definition: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: '{{ item.path | basename | regex_replace(".json.j2$", "") }}'
            namespace: '{{ grafana_namespace }}'
            labels:
              grafana_alert: '1'
          type: Opaque
          stringData:
            '{{ item.path | basename | regex_replace(".json.j2$", ".json") }}':
              '{{ lookup("template", item.path) | to_nice_json }}'
      loop: '{{ contact_point_templates.files }}'
      when: grafana_alert_contact_point in (item.path | basename)
      loop_control:
        label: '{{ item.path | basename }}'

    - name: Create postgres datasource secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: postgres-ingest-db-secret
            namespace: '{{ grafana_namespace }}'
            labels:
              # default value for: sidecar.datasources.label
              grafana_datasource: 'true'
          stringData:
            pg-db.yaml: "{{ lookup('template', 'templates/grafana/datasources/postgres-datasource.yaml.j2') }}"

    - name: Deploy Grafana
      ansible.builtin.include_role:
        name: scout_common
        tasks_from: deploy_helm_chart
      vars:
        helm_chart_name: grafana
        helm_chart_ref: grafana/grafana
        helm_chart_namespace: '{{ grafana_namespace }}'
        helm_repo_name: grafana
        helm_repo_url: https://grafana.github.io/helm-charts
        helm_chart_version: '~8.12.1'
        helm_chart_create_namespace: false
        helm_chart_values: "{{ lookup('template', 'templates/grafana/grafana.values.yaml.j2') | from_yaml }}"
