- name: Setup storage
  include_tasks: tasks/storage_setup.yaml
  vars:
    storage_definitions:
      - name: loki
        size: '200Gi'
        path: '{{ loki_dir }}'
      - name: grafana
        size: '50Gi'
        path: '{{ grafana_dir }}'

- name: Add Grafana Helm repository
  kubernetes.core.helm_repository:
    name: grafana
    repo_url: https://grafana.github.io/helm-charts

- name: Create Loki namespace
  kubernetes.core.k8s:
    name: '{{ loki_namespace }}'
    api_version: v1
    kind: Namespace
    state: present

- name: Create S3 secret for Loki
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: loki-secrets
        namespace: '{{ loki_namespace }}'
      type: Opaque
      stringData:
        AWS_ACCESS_KEY_ID: '{{ s3_loki_writer }}'
        AWS_SECRET_ACCESS_KEY: '{{ s3_loki_writer_secret }}'

- name: Install Loki using Helm
  kubernetes.core.helm:
    name: loki
    chart_ref: grafana/loki
    release_namespace: '{{ loki_namespace }}'
    update_repo_cache: true
    chart_version: ~6.29.0
    values_files:
      - '{{ scout_repo_dir }}/helm/loki/loki-values.yaml'
    state: present

- name: Install Promtail using Helm
  kubernetes.core.helm:
    name: promtail
    chart_ref: grafana/promtail
    release_namespace: '{{ loki_namespace }}'
    update_repo_cache: true
    chart_version: ~6.16.6
    values_files:
      - '{{ scout_repo_dir }}/helm/loki/promtail-values.yaml'
    state: present

- name: Create Grafana namespace
  kubernetes.core.k8s:
    name: '{{ grafana_namespace }}'
    api_version: v1
    kind: Namespace
    state: present

- name: Apply all Grafana ConfigMaps (dashboards, alerts, policies)
  include_tasks: tasks/configmap_from_templates.yaml
  loop:
    - path: "files/grafana/dashboards/"
      pattern: "*.json"
      label_key: grafana_dashboard

    - path: "templates/grafana/alerts/"
      pattern: "*.json.j2"
      label_key: grafana_alert

    - path: "templates/grafana/notification-policies/"
      pattern: "*.yaml.j2"
      label_key: grafana_alert
  loop_control:
    loop_var: obj

- name: Create contact point secrets
  block:
    - name: Find all Grafana contact points
      find:
        paths: 'templates/grafana/contact-points/'
        patterns: '*.json.j2'
      register: contact_point_templates

    - name: Create Secret for each Grafana contact point
      kubernetes.core.k8s:
        state: present
        definition: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: '{{ item.path | basename | regex_replace(".json.j2$", "") }}'
            namespace: '{{ grafana_namespace }}'
            labels:
              grafana_alert: '1'
          type: Opaque
          stringData:
            '{{ item.path | basename | regex_replace(".json.j2$", ".json") }}':
              '{{ lookup("template", item.path) | to_nice_json }}'
      loop: '{{ contact_point_templates.files }}'
      when: grafana_alert_contact_point in (item.path | basename)
      loop_control:
        label: '{{ item.path | basename }}'

- name: Create SMTP secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: smtp-grafana
        namespace: '{{ grafana_namespace }}'
        labels:
          grafana_alert: '1'
      type: Opaque
      stringData:
        user: '{{ grafana_smtp_user }}'
        password: '{{ grafana_smtp_password }}'
  when: grafana_alert_contact_point == 'email'

- name: Create postgres datasource secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: postgres-ingest-db-secret
        namespace: '{{ grafana_namespace }}'
        labels:
          grafana_datasource: 'true' # default value for: sidecar.datasources.label
      stringData:
        pg-db.yaml: "{{ lookup('template', 'templates/grafana/datasources/postgres-datasource.yaml.j2') }}"

- name: Install Grafana using Helm
  kubernetes.core.helm:
    state: present
    name: grafana
    chart_ref: grafana/grafana
    release_namespace: '{{ grafana_namespace }}'
    update_repo_cache: true
    chart_version: ~8.12.1
    values: '{{ lookup("template", "templates/grafana/grafana.values.yaml.j2") | from_yaml }}'
