prometheus:
  enabled: false
grafana:
  enabled: false
server:
  replicaCount: 1
  internalFrontend:
    enabled: true
  config:
    namespaces:
      create: true
    persistence:
      default:
        driver: 'cassandra'
        cassandra:
          hosts: ['temporal-cassandra-dc1-service.{{ temporal_namespace }}']
          port: 9042
          keyspace: temporal
          existingSecret: 'temporal-cassandra-superuser'
          replicationFactor: 1
          consistency:
            default:
              consistency: 'local_quorum'
              serialConsistency: 'local_serial'
{% if temporal_auth_enabled | default(true) %}
    authorization:
      jwtKeyProvider:
        keySourceURIs:
          - https://{{ server_hostname }}/kc/realms/scout/protocol/openid-connect/certs
        refreshInterval: 1m
      permissionsClaimName: groups
      authorizer: default
      claimMapper: default
{% endif %}
cassandra:
  enabled: false
elasticsearch:
  replicas: 1
  persistence:
    enabled: true
  volumeClaimTemplate:
    accessModes:
      - ReadWriteOnce
    storageClassName: '{{ elasticsearch_storage_class }}'
    resources:
      requests:
        storage: '{{ elasticsearch_storage_size | default("100Gi") }}'

web:
  additionalEnv:
    - name: TEMPORAL_UI_PUBLIC_PATH
      value: /temporal
{% if temporal_auth_enabled | default(true) %}
    - name: TEMPORAL_AUTH_ENABLED
      value: 'true'
    - name: TEMPORAL_AUTH_PROVIDER_URL
      value: 'https://{{ server_hostname }}/kc/realms/scout'
    - name: TEMPORAL_AUTH_CLIENT_ID
      value: '{{ keycloak_temporal_client_id }}'
    - name: TEMPORAL_AUTH_CLIENT_SECRET
      value: '{{ keycloak_temporal_client_secret }}'
    - name: TEMPORAL_AUTH_CALLBACK_URL
      value: 'https://{{ server_hostname }}/temporal/auth/sso/callback'
    - name: TEMPORAL_AUTH_SCOPES
      value: openid microprofile-jwt
{% endif %}
  ingress:
    enabled: true
    ingressClassName: traefik
{% if temporal_auth_enabled | default(true) %}
    annotations:
      traefik.ingress.kubernetes.io/router.middlewares: >
        kube-system-oauth2-proxy-error@kubernetescrd,
        kube-system-oauth2-proxy-auth@kubernetescrd
{% endif %}
    hosts:
      - '{{ server_hostname }}/temporal'