proxy:
  service:
    type: ClusterIP

hub:
  baseUrl: /jupyter
  resources:
    requests:
      cpu: 100m
      memory: 256M
    limits:
      cpu: 1
      memory: 1G
  shutdownOnLogout: true
  services:
    prometheus:
      admin: false
      # Secret would be preferred, but not clear how to do that in this chart
      api_token: '{{ jupyter_metrics_api_token }}'
    mcp:
      admin: false
      api_token: '{{ jupyter_mcp_api_token }}'
  loadRoles:
    metrics:
      description: 'Read JupyterHub metrics'
      scopes: [read:metrics]
      services: [prometheus]
    mcp:
      description: 'Allow MCP sidecars to access single-user server APIs'
      scopes: [access:servers]
      services: [mcp]
  db:
    pvc:
      storageClassName: '{{ jupyter_hub_storage_class }}'
  config:
    Authenticator:
      allowed_users: '{{ (jupyter_allowed_users | default([])) }}'
    JupyterHub:
      authenticator_class: '{{ jupyter_auth_class | default("dummy") }}'
    Spawner:
      http_timeout: 120

ingress:
  enabled: true
  ingressClassName: traefik
  hosts:
    - '{{ server_hostname }}'
  extraPaths:
    - path: /jupyter
      pathType: Prefix
      backend:
        service:
          name: proxy-public
          port:
            name: http

prePuller:
  hook:
    enabled: true
  continuous:
    enabled: '{{ jupyter_prepuller_continuous | default(false) }}'

singleuser:
  image:
    name: '{{ jupyter_singleuser_image_name | default("ghcr.io/washu-tag/pyspark-notebook") }}'
    tag: '{{ jupyter_singleuser_image_tag | default("1.1.0") }}'
    pullPolicy: Never
  cmd: null
  lifecycleHooks:
    postStart:
      exec:
        command:
          - '/bin/sh'
          - '-c'
          - |
            {% raw %}
            FLAG_FILE=/home/${NB_USER}/.scout_quickstart
            if [ ! -f $FLAG_FILE ]; then
              touch /home/${NB_USER}/notebook.ipynb
              mkdir -p /home/${NB_USER}/models
              mkdir -p /home/${NB_USER}/Scout &&
              cp -r /opt/scout/samples/* /home/${NB_USER}/Scout/ &&
              chown -R ${NB_USER}:${NB_GID} /home/${NB_USER}/Scout &&
              touch $FLAG_FILE
            fi
            {% endraw %}
  cpu:
    limit: 4
    guarantee: 1
  memory:
    limit: 16G
    guarantee: 2G
  extraResource: '{{ jupyter_singleuser_extra_resource | default({}) }}'
  storage:
    type: static
    static:
      pvcName: '{{ jupyter_singleuser_pvc }}'
      subPath: '{username}'
    capacity: 10Gi
    extraVolumes:
      - name: spark-defaults
        configMap:
          name: spark-defaults
    extraVolumeMounts:
      - name: spark-defaults
        mountPath: /usr/local/spark/conf/spark-defaults.conf
        subPath: spark-defaults.conf
  extraEnv:
    JUPYTERHUB_ALLOW_TOKEN_IN_URL: '1'
    HF_HOME: '/home/jovyan/models'
  extraFiles:
    10-logging:
      mountPath: /etc/jupyter/jupyter_server_config.d/10-logging.py
      stringData: |
        c.ServerApp.log_level = "DEBUG"
        c.Application.logging_config = {
          "version": 1,
          "disable_existing_loggers": False,
          "loggers": {
            "tornado.access": {"level": "DEBUG"},
            "tornado.application": {"level": "DEBUG"},
            "tornado.general": {"level": "DEBUG"},
            "jupyter_server": {"level": "DEBUG"},
            "jupyter_server.auth": {"level": "DEBUG"},
            "jupyterhub": {"level": "DEBUG"},
            "oauthlib": {"level": "DEBUG"},
          },
        }
  extraContainers:
    - name: jupyter-mcp
      image: datalayer/jupyter-mcp-server:latest
      imagePullPolicy: Never
      ports:
        - containerPort: 4040
      command: ['/bin/sh', '-lc']
      args:
        - |
          set -euo pipefail
          SERVICE_PREFIX="/user/$HUB_USERNAME"
          if [ -n "$SERVER_NAME" ]; then
            SERVICE_PREFIX="$SERVICE_PREFIX/$SERVER_NAME"
          fi

          HUB_BASE="http://proxy-public.jupyter.svc.cluster.local"
          BASE="$HUB_BASE/jupyter$SERVICE_PREFIX"
          export BASE
          export AUTH_TOKEN="$JUPYTER_MCP_SERVICE_TOKEN"

          echo "[mcp/wait] Jupyter API"
          python -c "$WAIT_FOR_JUPYTER_PY"
  
          echo "[mcp] starting jupyter-mcp-server"
          exec jupyter-mcp-server start \
            --transport streamable-http \
            --provider jupyter \
            --port 4040 \
            --document-url "$BASE" \
            --runtime-url  "$BASE" \
            --document-id "$NB_PATH" \
            --start-new-runtime true \
            --document-token "$JUPYTER_MCP_SERVICE_TOKEN" \
            --runtime-token  "$JUPYTER_MCP_SERVICE_TOKEN"
      env:
        - name: JUPYTER_MCP_SERVICE_TOKEN
          value: '{{ jupyter_mcp_api_token }}'
        - name: HUB_USERNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['hub.jupyter.org/username']
        - name: SERVER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['hub.jupyter.org/servername']
        - name: NB_PATH
          value: "notebook.ipynb"
        - name: WAIT_FOR_JUPYTER_PY
          value: |
            import os, time, urllib.request, urllib.error
            base = os.environ["BASE"]
            nb   = os.environ.get("NB_PATH","notebook.ipynb")
            tok  = os.environ.get("JUPYTER_MCP_SERVICE_TOKEN","")
            hdrs = dict([("Authorization", "token " + tok)]) if tok else dict()
            def wait(url):
                while True:
                    try:
                        req = urllib.request.Request(url, headers=hdrs)
                        urllib.request.urlopen(req, timeout=3).read()
                        break
                    except Exception:
                        time.sleep(1)
            wait(base + "/api/kernels")

    - name: mcpo
      image: '{{ mcpo_image }}'
      imagePullPolicy: Never
      ports:
        - containerPort: 8000
      command: ['/bin/sh', '-c']
      args:
        - |
          set -e
          # Wait for jupyter-mcp HTTP to be live
          echo "[mcpo] waiting"
          until curl -sS -o /dev/null --max-time 2 http://127.0.0.1:4040/; do
            echo "still waiting..."; sleep 2;
          done;
          echo "[mcpo] starting"
          exec /app/.venv/bin/mcpo \
            --host 0.0.0.0 \
            --port 8000 \
            --server-type streamable-http \
            -- \
            http://127.0.0.1:4040/mcp
  networkPolicy:
    egress:
      - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: '{{ minio_tenant_namespace }}'
        ports:
          - port: 9000
      - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: '{{ hive_namespace }}'
        ports:
          - port: 9083
      - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: '{{ open_webui_namespace | default("ollama")}}'
        ports:
          - port: 11434
      - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: '{{ trino_namespace | default("trino")}}'
        ports:
          - port: 8080
      - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: 'jupyter'
        ports:
          - port: 80
