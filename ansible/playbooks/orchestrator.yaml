---
- name: Install Temporal and workers
  hosts: server
  gather_facts: false
  environment:
    HELM_PLUGINS: '{{ helm_plugins_dir }}'
    KUBECONFIG: '{{ kubeconfig_yaml }}'
  tasks:
    - name: Setup storage
      include_tasks: tasks/storage_setup.yaml
      vars:
        storage_definitions:
          - name: cassandra
            size: '300Gi'
            path: '{{ temporal_cassandra_dir }}'
          - name: elasticsearch
            size: '100Gi'
            path: '{{ temporal_elasticsearch_dir }}'

    - name: Add cert-manager Helm repository
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io

    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: true
        release_state: present
        update_repo_cache: true
        wait: true
        wait_timeout: 5m
        atomic: true
        values:
          installCRDs: true

    - name: Add k8ssandra Helm repository
      kubernetes.core.helm_repository:
        name: k8ssandra
        repo_url: https://helm.k8ssandra.io/stable

    - name: Install the cass-operator
      kubernetes.core.helm:
        name: cass-operator
        chart_ref: k8ssandra/cass-operator
        release_namespace: temporal
        create_namespace: true
        release_state: present
        update_repo_cache: true
        wait: true
        wait_timeout: 10m
        atomic: true

    - name: Install the Cassandra datacenter
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cassandra.datastax.com/v1beta1
          kind: CassandraDatacenter
          metadata:
            name: dc1
            namespace: temporal
          spec:
            clusterName: temporal-cassandra
            serverType: cassandra
            serverVersion: '5.0.3'
            size: 1
            storageConfig:
              cassandraDataVolumeClaimSpec:
                storageClassName: cassandra-storage
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 300Gi
            racks:
              - name: r1
            config:
              jvm-server-options:
                initial_heap_size: '{{ temporal_cassandra_init_heap | default("2G") }}'
                max_heap_size: '{{ temporal_cassandra_max_heap | default("8G") }}'

    - name: Wait for Cassandra to be ready
      command: kubectl -n temporal wait --for=condition=Ready --timeout=300s cassandradatacenter/dc1
      register: cassandra_ready
      changed_when: false

    - name: Add Temporal Helm repository
      kubernetes.core.helm_repository:
        name: temporal
        repo_url: https://raw.githubusercontent.com/temporalio/helm-charts/refs/heads/gh-pages/

    - name: Install/Upgrade Temporal Helm chart
      kubernetes.core.helm:
        name: temporal
        chart_ref: temporal/temporal
        chart_version: ^0.56.0
        release_namespace: temporal
        create_namespace: true
        release_state: present
        update_repo_cache: true
        wait: true
        wait_timeout: 15m
        atomic: true
        values:
          prometheus:
            enabled: false
          grafana:
            enabled: false
          server:
            replicaCount: 1
            config:
              namespaces:
                create: true
              persistence:
                default:
                  driver: 'cassandra'
                  cassandra:
                    hosts: ['temporal-cassandra-dc1-service.temporal']
                    port: 9042
                    keyspace: temporal
                    existingSecret: 'temporal-cassandra-superuser'
                    replicationFactor: 1
                    consistency:
                      default:
                        consistency: 'local_quorum'
                        serialConsistency: 'local_serial'
          cassandra:
            enabled: false
          elasticsearch:
            replicas: 1
            persistence:
              enabled: true
            volumeClaimTemplate:
              accessModes:
                - ReadWriteOnce
              storageClassName: elasticsearch-storage
              resources:
                requests:
                  storage: 100Gi

          web:
            additionalEnv:
              - name: TEMPORAL_UI_PUBLIC_PATH
                value: /temporal
            ingress:
              enabled: true
              ingressClassName: traefik
              hosts:
                - '{{ server_hostname }}/temporal'

    - name: Wait for Temporal schema job to complete
      command: kubectl -n temporal wait --for=condition=complete --timeout=300s job/temporal-schema-1
      register: temporal_schema
      changed_when: false

    - name: Install postgres
      include_tasks: tasks/postgres.yaml

    - name: Create namespace
      kubernetes.core.k8s:
        name: '{{ orchestration_worker_namespace }}'
        api_version: v1
        kind: Namespace
        state: present

    - name: Create S3 secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: s3-secret
            namespace: '{{ orchestration_worker_namespace }}'
          type: Opaque
          stringData:
            AWS_ACCESS_KEY_ID: '{{ s3_username }}'
            AWS_SECRET_ACCESS_KEY: '{{ s3_password }}'

    - name: Create S3 configmap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: s3-env
            namespace: '{{ orchestration_worker_namespace }}'
          data:
            AWS_ENDPOINT_URL: '{{ s3_endpoint }}'
            AWS_ALLOW_HTTP: 'true'
            AWS_REGION: '{{ s3_region }}'

    - name: Setup Spark Defaults ConfigMaps
      include_tasks: tasks/spark_config_setup.yaml
      vars:
        spark_defaults_configmap_name: 'spark-defaults'
        spark_defaults_configmap_namespace: '{{ orchestration_worker_namespace }}'
        spark_memory: '{{ orchestrator_spark_memory }}'

    - name: Deploy Java worker
      kubernetes.core.helm:
        name: temporal-java
        chart_ref: '{{ scout_repo_dir }}/helm/orchestration/temporal-worker'
        values_files:
          - '{{ scout_repo_dir }}/helm/orchestration/temporal-java.values.yaml'
        release_namespace: '{{ orchestration_worker_namespace }}'
        release_state: present
        wait: true
        wait_timeout: 5m
        atomic: true
        values:
          config:
            application:
              s3:
                endpoint: '{{ s3_endpoint }}'
                region: '{{ s3_region }}'
              spring:
                datasource:
                  url: 'jdbc:postgresql://postgresql-cluster-rw.{{ postgres_cluster_namespace }}:5432/ingest'
                  username: '{{ postgres_user }}'
                  password: '{{ postgres_password }}'
          image:
            repository: '{{ temporal_java_image | default(omit) }}'
          volumes: >-
            {{
              [{
                'name': 'data',
                'hostPath': { 'path': orchestration_data_dir }
              }]
              if orchestration_data_dir is defined else omit
            }}

    - name: Deploy Python worker
      kubernetes.core.helm:
        name: temporal-python
        chart_ref: '{{ scout_repo_dir }}/helm/orchestration/temporal-worker'
        values_files:
          - '{{ scout_repo_dir }}/helm/orchestration/temporal-python.values.yaml'
        release_namespace: '{{ orchestration_worker_namespace }}'
        release_state: present
        wait: true
        wait_timeout: 5m
        atomic: true
        values:
          image:
            repository: '{{ temporal_python_image | default(omit) }}'
          spark:
            executor:
              memory: '{{ orchestrator_spark_memory }}'
          volumes: >-
            {{
              [
                {
                  'name': 'data',
                  'hostPath': { 'path': orchestration_data_dir }
                },
                {
                  'name': 'spark-defaults',
                  'configMap': { 'name': 'spark-defaults' }
                }
              ]
              if orchestration_data_dir is defined else omit
            }}
