---
- name: Create storage directories for Temporal
  hosts: k3s_cluster
  gather_facts: false
  vars_files:
    - vars/orchestrator_storage.yaml
  tasks:
    - name: Create storage directories
      include_tasks: tasks/storage_dir_create.yaml

- name: Install Temporal and workers
  hosts: server
  gather_facts: false
  environment:
    HELM_PLUGINS: '{{ helm_plugins_dir }}'
    KUBECONFIG: '{{ kubeconfig_yaml }}'
  vars_files:
    - vars/orchestrator_storage.yaml
  tasks:
    - name: Set up storage
      include_tasks: tasks/storage_setup.yaml

    - name: Add cert-manager Helm repository
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io
      delegate_to: localhost

    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: true
        release_state: present
        update_repo_cache: true
        wait: true
        wait_timeout: 5m
        atomic: true
        values:
          installCRDs: true
      delegate_to: localhost

    - name: Add k8ssandra Helm repository
      kubernetes.core.helm_repository:
        name: k8ssandra
        repo_url: https://helm.k8ssandra.io/stable
      delegate_to: localhost

    - name: Install the cass-operator
      kubernetes.core.helm:
        name: cass-operator
        chart_ref: k8ssandra/cass-operator
        chart_version: ~0.55.2
        release_namespace: '{{ temporal_namespace }}'
        create_namespace: true
        release_state: present
        update_repo_cache: true
        wait: true
        wait_timeout: 10m
        atomic: true
      delegate_to: localhost

    - name: Install the Cassandra datacenter
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cassandra.datastax.com/v1beta1
          kind: CassandraDatacenter
          metadata:
            name: dc1
            namespace: '{{ temporal_namespace }}'
          spec:
            clusterName: temporal-cassandra
            serverType: cassandra
            serverVersion: '5.0.3'
            size: 1
            storageConfig:
              cassandraDataVolumeClaimSpec:
                storageClassName: '{{ cassandra_storage_class }}'
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "{{ cassandra_storage_size | default('100Gi') }}"
            racks:
              - name: r1
            config:
              jvm-server-options:
                initial_heap_size: '{{ temporal_cassandra_init_heap | default("2G") }}'
                max_heap_size: '{{ temporal_cassandra_max_heap | default("8G") }}'
      delegate_to: localhost

    - name: Wait for Cassandra to be ready
      command: 'kubectl -n {{ temporal_namespace }} wait --for=condition=Ready --timeout=600s cassandradatacenter/dc1'
      register: cassandra_ready
      changed_when: false
      delegate_to: localhost

    - name: Add Temporal Helm repository
      kubernetes.core.helm_repository:
        name: temporal
        repo_url: https://raw.githubusercontent.com/temporalio/helm-charts/refs/heads/gh-pages/
      delegate_to: localhost

    - name: Create Temporal namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: '{{ temporal_namespace }}'
      delegate_to: localhost

    - name: Create CA cert secret for Temporal
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: temporal-ca-cert
            namespace: '{{ temporal_namespace }}'
          type: kubernetes.io/tls
          data:
            tls.crt: '{{ lookup("kubernetes.core.k8s", kind="Secret", namespace="kube-system", resource_name="tls-secret").data["tls.crt"] }}'
            tls.key: '{{ lookup("kubernetes.core.k8s", kind="Secret", namespace="kube-system", resource_name="tls-secret").data["tls.key"] }}'
      delegate_to: localhost
      when: lookup('env', 'CI') == 'true'

    - name: Install/Upgrade Temporal Helm chart
      register: temporal_helm_result
      kubernetes.core.helm:
        name: temporal
        chart_ref: temporal/temporal
        chart_version: ~0.64.0
        release_namespace: '{{ temporal_namespace }}'
        create_namespace: true
        release_state: present
        update_repo_cache: true
        wait: true
        wait_timeout: 5m
        atomic: true
        values: "{{ lookup('template', 'templates/temporal.values.yaml.j2') | from_yaml }}"
      delegate_to: localhost
      ignore_errors: true

    - name: Debug - Get temporal-web and internal-frontend pod status
      ansible.builtin.shell: |
        kubectl get pods -n {{ temporal_namespace }} -l 'app.kubernetes.io/component in (web,internal-frontend)' -o wide
      register: temporal_pods
      delegate_to: localhost
      ignore_errors: true
      changed_when: false

    - name: Debug - Display pod status
      debug:
        msg: '{{ temporal_pods.stdout_lines }}'

    - name: Debug - Get temporal-web logs
      ansible.builtin.shell: |
        echo "==== temporal-web logs ===="
        kubectl logs -n {{ temporal_namespace }} -l app.kubernetes.io/component=web --tail=100 --all-containers || true
        echo ""
        echo "==== temporal-web previous logs ===="
        kubectl logs -n {{ temporal_namespace }} -l app.kubernetes.io/component=web --tail=100 --all-containers --previous || true
      register: web_logs
      delegate_to: localhost
      ignore_errors: true
      changed_when: false

    - name: Debug - Display temporal-web logs
      debug:
        msg: '{{ web_logs.stdout_lines }}'

    - name: Debug - Get temporal-internal-frontend logs
      ansible.builtin.shell: |
        echo "==== temporal-internal-frontend logs ===="
        kubectl logs -n {{ temporal_namespace }} -l app.kubernetes.io/component=internal-frontend --tail=100 --all-containers || true
        echo ""
        echo "==== temporal-internal-frontend previous logs ===="
        kubectl logs -n {{ temporal_namespace }} -l app.kubernetes.io/component=internal-frontend --tail=100 --all-containers --previous || true
      register: internal_frontend_logs
      delegate_to: localhost
      ignore_errors: true
      changed_when: false

    - name: Debug - Display temporal-internal-frontend logs
      debug:
        msg: '{{ internal_frontend_logs.stdout_lines }}'

    - name: Debug - Describe temporal-web pod
      ansible.builtin.shell: |
        kubectl describe pod -n {{ temporal_namespace }} -l app.kubernetes.io/component=web
      register: web_describe
      delegate_to: localhost
      ignore_errors: true
      changed_when: false

    - name: Debug - Display temporal-web description
      debug:
        msg: '{{ web_describe.stdout_lines }}'

    - name: Fail if temporal deployment failed
      fail:
        msg: 'Temporal deployment failed - see debug output above'
      when: temporal_helm_result is failed

    - name: Wait for Temporal schema job to complete
      shell: >-
        if kubectl -n {{ temporal_namespace }} get jobs temporal-schema-{{ temporal_helm_result.status.revision }} >/dev/null 2>&1; then
          kubectl -n {{ temporal_namespace }} wait --for=condition=complete --timeout=300s job/temporal-schema-{{ temporal_helm_result.status.revision }}
        fi
      register: temporal_schema
      changed_when: false
      delegate_to: localhost
      when: temporal_helm_result is succeeded

    - name: Construct cron schedule
      when: scheduled_ingest_cron is undefined and scheduled_ingest_hour is defined
      set_fact:
        scheduled_ingest_cron: '0 {{ scheduled_ingest_hour }} * * *'

    - name: Add scheduled task for prospective report indexing
      when: scheduled_ingest_cron is defined
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: 'add-prospective-indexing'
            namespace: '{{ temporal_namespace }}'
            labels:
              app: prospective-indexing
          spec:
            backoffLimit: 5
            template:
              metadata:
                labels:
                  app: prospective-indexing
              spec:
                restartPolicy: Never
                containers:
                  - name: prospective-indexing-setup
                    image: temporalio/admin-tools
                    env:
                      - name: TEMPORAL_ADDRESS
                        value: 'temporal-frontend.{{ temporal_namespace }}:7233'
                    command:
                      - temporal
                      - schedule
                      - create
                      - '--schedule-id'
                      - ScheduledReportIngest
                      - '--workflow-id'
                      - ScheduledReportIngest
                      - '--task-queue'
                      - ingest-hl7-log
                      - '--type'
                      - IngestHl7LogWorkflow
                      - '--cron'
                      - '{{ scheduled_ingest_cron }}'
      delegate_to: localhost
