---
- name: Shared pre-requisites for K3s
  hosts: k3s_cluster
  vars:
    uninstall_script: '/usr/local/bin/k3s-uninstall.sh'
  tasks:
    - name: Create /root/bin directory
      ansible.builtin.file:
        path: /root/bin
        state: directory
        mode: '0700'

    - name: Download K3s installation script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /root/bin/get.k3s.io.sh
        mode: '0755'

    - name: Add python kubernetes library from system package
      package:
        name: python3-kubernetes
        state: present

################################################################################
- name: Configure registry mirrors for air-gapped deployment
  hosts: k3s_cluster
  gather_facts: false
  tasks:
    - name: Check if staging node is enabled
      ansible.builtin.set_fact:
        use_staging_node: "{{ 'staging' in groups and air_gapped | default(false) | bool }}"

    - name: Debug log if staging node not enabled
      ansible.builtin.debug:
        msg: 'Staging node not enabled (air_gapped=false), skipping registry mirror configuration'
      when: not use_staging_node

    - name: Remove registry mirror file when not using staging node
      ansible.builtin.file:
        path: /etc/rancher/k3s/registries.yaml
        state: absent
      when: not use_staging_node
      register: registry_removal_task_result

    - name: Create registry mirror file
      when: use_staging_node
      block:
        - name: Create rancher k3s config directory
          ansible.builtin.file:
            path: /etc/rancher/k3s
            state: directory
            mode: '0755'

        - name: Load Harbor role variables (default values)
          ansible.builtin.include_vars:
            file: '{{ playbook_dir}}/../roles/harbor/defaults/main.yaml'
          run_once: true

        - name: Get Harbor configuration from staging node inventory var overrides
          ansible.builtin.set_fact:
            staging_hostname: "{{ hostvars[groups['staging'][0]].external_url | default(groups['staging'][0]) }}"
            staging_harbor_expose_type: "{{ hostvars[groups['staging'][0]].harbor_expose_type | default(harbor_expose_type) }}"
            staging_harbor_nodeport: "{{ hostvars[groups['staging'][0]].harbor_nodeport_https | default(harbor_nodeport_https) }}"
          run_once: true

        - name: Compute Harbor URL components
          ansible.builtin.set_fact:
            staging_harbor_host: "{{ staging_hostname }}{% if staging_harbor_expose_type == 'nodePort' %}:{{ staging_harbor_nodeport }}{% endif %}"
          run_once: true

        - name: Build staging harbor proxies with inventory overrides
          ansible.builtin.set_fact:
            staging_harbor_proxies: []
          run_once: true

        - name: Apply inventory overrides for each proxy
          ansible.builtin.set_fact:
            staging_harbor_proxies: >-
              {{
                staging_harbor_proxies + [{
                  'public_registry': item.public_registry,
                  'registry_name': item.registry_name,
                  'registry_type': item.registry_type,
                  'registry_url': item.registry_url,
                  'project_name': hostvars[groups['staging'][0]]['harbor_' + item.registry_name + '_proxy_project'] | default(item.project_name)
                }]
              }}
          loop: '{{ harbor_registry_proxies }}'
          run_once: true

        - name: Configure registry mirrors
          ansible.builtin.copy:
            dest: /etc/rancher/k3s/registries.yaml
            content: |
              mirrors:
              {% for proxy in staging_harbor_proxies %}
                {{ proxy.public_registry }}:
                  endpoint:
                    - "{{ staging_harbor_host }}"
                  rewrite:
                    "^(.*)$": "{{ proxy.project_name }}/$1"
              {% endfor %}
              configs:
                "{{ staging_harbor_host }}":
                  tls:
                    insecure_skip_verify: true  # Using self-signed cert
            mode: '0644'
          register: registry_config_task_result

    - name: Determine if registry config changed
      ansible.builtin.set_fact:
        registry_config_changed: >-
          {{ (registry_config_task_result is defined and registry_config_task_result.changed | default(false)) or
             (registry_removal_task_result is defined and registry_removal_task_result.changed | default(false)) }}

################################################################################
- hosts: server
  name: Install k3s on server node
  vars:
    uninstall_script: '/usr/local/bin/k3s-uninstall.sh'
  environment:
    KUBECONFIG: '{{ kubeconfig_yaml }}'
  tasks:
    - name: Determine deployment context
      set_fact:
        is_local_deployment: '{{ inventory_hostname == ansible_hostname or ansible_connection | default("ssh") == "local" }}'

    - name: Create directory for K3s data
      file:
        path: '{{ base_dir }}'
        state: directory
        mode: '0755'

    - name: Install k3s server
      ansible.builtin.command:
        cmd: /root/bin/get.k3s.io.sh
        creates: '{{ uninstall_script }}'
      environment:
        INSTALL_K3S_EXEC: >-
          --default-local-storage-path={{ base_dir }}
          --write-kubeconfig-mode=0640
          {% if use_staging_node | default(false) %}--disable-default-registry-endpoint{% endif %}
        INSTALL_K3S_VERSION: '{{ k3s_version | default("") }}'
        K3S_TOKEN: '{{ k3s_token }}'
        UNINSTALL_K3S_SH: '{{ uninstall_script }}'
      register: k3s_install_result

    - name: Restart k3s to pick up registry config changes
      ansible.builtin.systemd:
        name: k3s
        state: restarted
      when:
        - registry_config_changed | default(false)
        - not k3s_install_result.changed

    - name: Update kubeconfig group permissions since write-kubeconfig-group isn't working
      file:
        path: /etc/rancher/k3s/k3s.yaml
        state: file
        mode: '0640'
        group: '{{ kubeconfig_group }}'

    - name: Set up kubeconfig
      include_tasks: tasks/set_up_kubeconfig.yaml

    - name: Ensure k3s control plane server is started
      ansible.builtin.systemd:
        name: k3s
        state: started
        enabled: true
        scope: system
      register: k3s_systemd_start_k3s
      until: k3s_systemd_start_k3s is succeeded
      retries: 3
      delay: 3
      failed_when:
        - k3s_systemd_start_k3s is not succeeded
        - not ansible_check_mode
      changed_when: false

    - name: Check that the server is available to accept connections
      ansible.builtin.wait_for:
        port: 6443
        host: 127.0.0.1
        delay: 5
        sleep: 5
        timeout: 300
      changed_when: false

    - name: Check that server is ready
      ansible.builtin.command:
        cmd: kubectl get nodes
      changed_when: false
      failed_when: >-
        kubectl_get_nodes_result.stdout.find("was refused") != -1 or
        kubectl_get_nodes_result.stdout.find("ServiceUnavailable") != -1
      register: kubectl_get_nodes_result
      until:
        - kubectl_get_nodes_result.rc == 0
        - kubectl_get_nodes_result.stdout.find("NotReady") == -1
      retries: 30
      delay: 5

    - name: Apply taint to control plane node
      kubernetes.core.k8s_taint:
        name: '{{ inventory_hostname }}'
        state: present
        taints:
          - key: node-role.kubernetes.io/control-plane
            effect: PreferNoSchedule

################################################################################
- hosts: gpu_workers
  name: Configure k3s runtime on GPU worker nodes
  tasks:
    - name: Create storage directory
      ansible.builtin.file:
        path: /etc/rancher/k3s
        state: directory
        mode: '0755'

    - name: Write k3s service configuration for GPU runtime
      ansible.builtin.copy:
        dest: /etc/rancher/k3s/config.yaml
        content: |
          default-runtime: nvidia

    - name: Add NVIDIA container toolkit repository
      get_url:
        url: https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo
        dest: /etc/yum.repos.d/nvidia-container-toolkit.repo
        mode: '0644'

    - name: Install NVIDIA container toolkit packages
      package:
        name:
          - nvidia-container-toolkit
          - nvidia-container-toolkit-base
          - libnvidia-container-tools
          - libnvidia-container1
        state: present

    - name: Verify NVIDIA container toolkit installation
      command: nvidia-ctk --version
      register: nvidia_ctk_version
      changed_when: false

################################################################################
- hosts: agents
  name: Install k3s on agent nodes
  vars:
    uninstall_script: '/usr/local/bin/k3s-agent-uninstall.sh'
  tasks:
    - name: Install k3s agent
      ansible.builtin.command:
        cmd: /root/bin/get.k3s.io.sh
        creates: '{{ uninstall_script }}'
      environment:
        INSTALL_K3S_VERSION: '{{ k3s_version | default("") }}'
        K3S_URL: 'https://{{ groups["server"][0] }}:6443'
        K3S_TOKEN: '{{ k3s_token }}'
        UNINSTALL_K3S_SH: '{{ uninstall_script }}'
      register: k3s_agent_install_result

    - name: Restart k3s-agent to pick up registry config changes
      ansible.builtin.systemd:
        name: k3s-agent
        state: restarted
      when:
        - registry_config_changed | default(false)
        - not k3s_agent_install_result.changed
